ID	Area	Title	Description
114262	area-System.Threading	[net9] System.Private.CoreLib occurs InvalidOperationException and InvalidCastException	  reproduces absolutely randomly both in debug and in release mode, appeared after switching from net8-ios to net9-ios (It doesn't seem like it applies to iOS)  stacktrace of InvalidCastException:   System.InvalidCastException: Specified cast is not valid.    at System.Threading.Tasks.Task.RunContinuations(Object continuationObject)    at System.Threading.Tasks.Task.FinishContinuations()    at System.Threading.Tasks.Task.FinishStageThree()    at System.Threading.Tasks.Task.FinishStageTwo()    at System.Threading.Tasks.Task.FinishSlow(Boolean userDelegateExecute)    at System.Threading.Tasks.Task.Finish(Boolean userDelegateExecute)    at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot, Thread threadPoolThread)    at System.Threading.Tasks.Task.ExecuteEntryUnsafe(Thread threadPoolThread)    at System.Threading.Tasks.Task.ExecuteFromThreadPool(Thread threadPoolThread)    at System.Threading.ThreadPoolWorkQueue.DispatchItemWithAutoreleasePool(Object workItem, Thread currentThread)    at System.Threading.ThreadPoolWorkQueue.Dispatch()    at System.Threading.PortableThreadPool.WorkerThread.WorkerThreadStart()    at System.Threading.Thread.StartCallback()  stacktrace of InvalidOperationException (from Sentry):  System.InvalidOperationException: Arg_InvalidOperationException   ?, in void ManualResetValueTaskSourceCore<long>.SignalCompletion()   ?, in void ManualResetValueTaskSourceCore<long>.SetResult(long)   ?, in void ThreadPoolValueTaskSource.ExecuteInternal()   ?, in void ThreadPoolValueTaskSource.System.Threading.IThreadPoolWorkItem.Execute()   ?, in void ThreadPoolWorkQueue.DispatchItemWithAutoreleasePool(object, Thread)   ?, in bool ThreadPoolWorkQueue.Dispatch()   ?, in void WorkerThread.WorkerThreadStart()  also screenshot from debug session (from AppDomain.CurrentDomain.UnhandledException):  ![Image](https://github.com/user-attachments/assets/22e553f0-1a6b-4fb8-af50-b428ea33bab9)    Reproduction Steps  have not steps   Expected behavior  no crashes   Actual behavior  crash occurs   Regression?  works in net8-ios   Known Workarounds  _No response_   Configuration  net9, ios 18   Other information  _No response_
114260	area-System.Security	openssl error `digest not allowed` on RSA PSS signature in fips mode	  If openssl is built/configured in fips mode, when trying to do a signature with an RSA key using the PSS padding format, openssl returns the error `1C8000AE:Provider routines::digest not allowed`   Reproduction Steps  - build openssl 3.0.9 in fips mode, install it, and use the configuration provided above - call the [SignHash](https://learn.microsoft.com/en-us/dotnet/api/system.security.cryptography.rsa.signhash?view=net-9.0) method using hash algorithm [HashAlgorithmName.SHA256](https://learn.microsoft.com/en-us/dotnet/api/system.security.cryptography.hashalgorithmname.sha256?view=net-9.0#system-security-cryptography-hashalgorithmname-sha256) (or sha384/sah512, doesn't matter) and padding [RSASignaturePadding.Pss]()   Expected behavior  We get a valid signature and no error.   Actual behavior  We get the error `1C8000AE:Provider routines::digest not allowed` from openssl.   Regression?  _No response_   Known Workarounds  _No response_   Configuration  - linux x86_64  - .NET 9.0.202 - openssl 3.0.9 built *in fips mode* Using the following openssl configuration: ``` openssl_conf = default_conf  [default_conf] providers = provider_sect  [provider_sect] fips = fips_sect base = base_sect  [fips_sect] activate = 1 conditional-errors = 1 security-checks = 1  [base_sect] activate = 1 ```   Other information  This issue stems from the [ConfigureSignature](https://github.com/dotnet/runtime/blob/main/src/native/libs/System.Security.Cryptography.Native/pal_evp_pkey_rsa.c#L216) function in the CryptoNative wrapper which calls `EVP_PKEY_CTX_set_rsa_padding` *before* setting the digest used for mgf1.  In this situation openssl defaults to SHA1, see [here](https://github.com/openssl/openssl/blob/openssl-3.0/providers/implementations/signature/rsa_sig.c#L1355). In fips mode SHA1 is forbidden and the set_rsa_padding call fails. 
114259	Unlabeled	[API Proposal]: Allow ObsoleteAttribute to target assemblies to enable marking entire assembly as obsolete	 Background and motivation  This is a revisit of https://github.com/dotnet/runtime/issues/23979 which seemed to have been given the go-ahead 7 years ago, but the change was never made.  It's occasionally desirable to mark entire assemblies as obsolete. But currently [`System.ObsoleteAttribute`](https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/ObsoleteAttribute.cs) can only target types and type members. The alternative now is to mark every public type in the assembly as obsolete but this is inconvenient if your assembly contains a large number of types.  I understand that downstream tooling (e.g. Roslyn, etc.) may not recognize `ObsoleteAttribute` on assemblies for now but this change could precede such tooling updates.   API Proposal  ```csharp namespace System;  [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum |         AttributeTargets.Interface | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property |         AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Delegate,         Inherited = false)] public sealed class ObsoleteAttribute : Attribute {     ... } ```    API Usage  ```csharp [assembly: Obsolete("This assembly is obsolete.")] ```    Alternative Designs  _No response_   Risks  _No response_
114251	area-System.DirectoryServices	PrincipalContext.ValidateCredentials is unable to validate credentials using Kerberos authentication.	  The documentation for ValidateCredentials states this about the userName parameter:  > The userName argument must take the form username (for example, mcampbell) rather than domain\username or username@domain.  It also says this about the options parameter:  > This parameter can only specify Simple bind with or without SSL, or Negotiate bind.  I had expected that when calling this function specifying `ContextOptions.Negotiate` and a domain account, Kerberos would be used. That was not the case. It used NTLM  The Negotiate documentation states the following:  > To allow Negotiate to select the [Kerberos](https://learn.microsoft.com/en-us/windows/win32/secauthn/microsoft-kerberos) security provider, the client app must provide one of the following: > - A [service principal name](https://learn.microsoft.com/en-us/windows/win32/secgloss/s-gly) (SPN). > - A user principal name (UPN). > - A NetBIOS account name as the target name. >  > Otherwise, Negotiate always selects the [NTLM](https://learn.microsoft.com/en-us/windows/win32/secauthn/microsoft-ntlm) security provider.  Based on this, it is not surprising that a username specified without any domain component would use NTLM, however the ValidateCredentials method is on the context object, which identifies the user domain. I had assumed that the domain information would be extracted from the context when executing the credential validation.  Even though the documentation states that the userName parameter must be in a specific format, I tried using other formats to force it to use Kerberos, but the validation failed, returning `False`.   Reproduction Steps  From PowerShell:  ``` $domain = "DOMAIN" $username = "user" $password = "password" Add-Type -AssemblyName System.DirectoryServices.AccountManagement $context = [System.DirectoryServices.AccountManagement.PrincipalContext]::new([System.DirectoryServices.AccountManagement.ContextType]::Domain, $domain) $user = [System.DirectoryServices.AccountManagement.UserPrincipal]::FindByIdentity($context, [System.DirectoryServices.AccountManagement.IdentityType]::SamAccountName, $username) $user.Context.ValidateCredentials($user.SamAccountName, $password, [System.DirectoryServices.AccountManagement.ContextOptions]::Negotiate) ```  With Credential Validation auditing enabled, you will see an event logged similar to:  > The computer attempted to validate the credentials for an account. >  > Authentication Package: MICROSOFT_AUTHENTICATION_PACKAGE_V1_0 > Logon Account: User > Source Workstation: COMPUTER > Error Code: 0x0  The documentation for this event indicates that this is logged when a credential validation is performed using NTLM.   Expected behavior  The ValidateCredentials function performs the validation using Kerberos when validating a domain account and when Negotiate is specified.   Actual behavior  The ValidateCredentials function performs the validation using NTLM when validating a domain account and when Negotiate is specified.   Regression?  No   Known Workarounds  The ValidateCredentials does the validation by executing an LdapConnection bind. If the bind is performed manually specifying the account as "DOMAIN\User", the bind is performed using Kerberos.   Configuration  Issue has been observed on the following runtimes: - .Net 8 console application - Windows PowerShell 5.1 - PowerShell 7.5   Other information  _No response_
114250	area-Codegen-Intrinsics-mono	[wasm]regression in _HwiSideEffects::HwiSideEffects.TestProblemWithThrowingLoads	 Build Information Build: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=1004750 Build error leg or test failing: _HwiSideEffects::HwiSideEffects.TestProblemWithThrowingLoads() Pull request: https://github.com/dotnet/runtime/pull/114243 <!-- Error message template  -->  Error Message  Fill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).  <!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. -->  ```json {   "ErrorMessage": "Failed test: _HwiSideEffects::HwiSideEffects.TestProblemWithThrowingLoads",   "ErrorPattern": "",   "BuildRetry": false,   "ExcludeConsoleLog": false } ```   <!-- Known issue validation start -->   Known issue validation **Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004750 **Error message validated:** `[Failed test: _HwiSideEffects::HwiSideEffects.TestProblemWithThrowingLoads`] **Result validation:** :white_check_mark: Known issue matched with the provided build. **Validation performed at:** 4/4/2025 1:33:08 AM UTC <!-- Known issue validation end --> <!--Known issue error report start -->   Report  |Build|Definition|Test|Pull Request| |---|---|---|---| |[1004750](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004750)|dotnet/runtime|[_HwiSideEffects::HwiSideEffects.TestProblemWithThrowingLoads()](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004750&view=ms.vss-test-web.build-test-results-tab&runId=26816918&resultId=105536)|dotnet/runtime#114243| # Summary |24-Hour Hit Count|7-Day Hit Count|1-Month Count| |---|---|---| |1|1|1| <!--Known issue error report end -->
114248	Unlabeled	osx-x64 Release AllSubsets_Mono_Minijit_RuntimeTests minijit build leg fails to build with an error referencing a macosx12.0	 Build Information Build: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=1003296&view=logs&j=28035387-23c9-50dd-d519-66c274947a2c Build error leg or test failing: Build / osx-x64 Release AllSubsets_Mono_Minijit_RuntimeTests minijit / Build product Pull request: https://github.com/dotnet/runtime/pull/113286 <!-- Error message template  -->  Error Message  Fill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).  <!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. -->  ```json {   "ErrorMessage": "unexpected input file: x86_64-apple-macosx12.0",   "BuildRetry": false,   "ExcludeConsoleLog": false } ```   <!-- Known issue validation start -->   Known issue validation **Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003296 **Error message validated:** `[unexpected input file: x86_64-apple-macosx12.0`] **Result validation:** :white_check_mark: Known issue matched with the provided build. **Validation performed at:** 4/3/2025 11:50:24 PM UTC <!-- Known issue validation end --> <!--Known issue error report start -->   Report |Build|Definition|Step Name|Console log|Pull Request| |---|---|---|---|---| |[1005225](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005225)|dotnet/runtime|Build product|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1005225/logs/330)|dotnet/runtime#111791| |[1005183](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005183)|dotnet/runtime|Build product|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1005183/logs/630)|dotnet/runtime#114148| |[1005171](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005171)|dotnet/runtime|Build product|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1005171/logs/655)|| |[1005153](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005153)|dotnet/runtime|Build product|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1005153/logs/573)|dotnet/runtime#114249| |[1005140](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005140)|dotnet/runtime|Build product|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1005140/logs/653)|dotnet/runtime#114228| |[1004946](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004946)|dotnet/runtime|Build product|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1004946/logs/194)|dotnet/runtime#114253| |[1004925](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004925)|dotnet/runtime|Build product|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1004925/logs/236)|dotnet/runtime#111408| |[1004888](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004888)|dotnet/runtime|Build product|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1004888/logs/497)|dotnet/runtime#113976| |[1003296](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003296)|dotnet/runtime|Build product|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1003296/logs/1897)|dotnet/runtime#113286| |[1004711](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004711)|dotnet/runtime|Build product|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1004711/logs/774)|dotnet/runtime#114240| |[1004743](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004743)|dotnet/runtime|Build product|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1004743/logs/738)|| |[1004699](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004699)|dotnet/runtime|Build product|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1004699/logs/809)|dotnet/runtime#114227| |[1004520](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004520)|dotnet/runtime|Build product|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1004520/logs/1245)|dotnet/runtime#114164| # Summary |24-Hour Hit Count|7-Day Hit Count|1-Month Count| |---|---|---| |13|13|13| <!--Known issue error report end -->
114236	area-Build-mono	The 'wasi-experimental' workload is not supported in .NET 9	  Tried changing the test project csproj to  <TargetFramework>net8.0</TargetFramework>  but no change. Cannot build the wasiconsole template if you have dotnet 9 installed.  Any workaround?   Reproduction Steps  Install dotnet 9   Expected behavior  Create the sample  dotnet new wasiconsole -o wasiconsole  Try to build     Actual behavior  dotnet run  C:\Program Files\dotnet\sdk-manifests\9.0.100\microsoft.net.workload.mono.toolchain.current\9.0.3\WorkloadManifest.Wasi.targets(14,5): error : The 'wasi-experimental' workload is not supported in .NET 9.   Regression?  _No response_   Known Workarounds  _No response_   Configuration  _No response_   Other information  _No response_
114235	area-Infrastructure-mono	CI flakiness: iOS builds failing with SDK errors	 Build Information Build: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=1004210&view=logs&j=a2a39d6b-70c5-5040-933a-4b8b6e52bf19 Build error leg or test failing: Build / maccatalyst-x64 Release AllSubsets_Mono / Build product Pull request: https://github.com/dotnet/runtime/pull/114087 <!-- Error message template  -->  Error Message  Fill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).  <!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. -->  ```json {   "ErrorMessage": "EXEC : error : unexpected input file: x86_64-apple",   "ErrorPattern": "",   "BuildRetry": false,   "ExcludeConsoleLog": false } ```   <!-- Known issue validation start -->   Known issue validation **Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004210 **Error message validated:** `[EXEC : error : unexpected input file: x86_64-apple`] **Result validation:** :white_check_mark: Known issue matched with the provided build. **Validation performed at:** 4/3/2025 6:44:41 PM UTC <!-- Known issue validation end --> <!--Known issue error report start -->   Report |Build|Definition|Step Name|Console log|Pull Request| |---|---|---|---|---| |[1005225](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005225)|dotnet/runtime|Build product|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1005225/logs/330)|dotnet/runtime#111791| |[1005183](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005183)|dotnet/runtime|Build product|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1005183/logs/630)|dotnet/runtime#114148| |[1005153](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005153)|dotnet/runtime|Build product|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1005153/logs/573)|dotnet/runtime#114249| |[1005140](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005140)|dotnet/runtime|Build product|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1005140/logs/653)|dotnet/runtime#114228| |[1004888](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004888)|dotnet/runtime|Build product|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1004888/logs/497)|dotnet/runtime#113976| |[1003296](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003296)|dotnet/runtime|Build product|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1003296/logs/1897)|dotnet/runtime#113286| |[1004711](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004711)|dotnet/runtime|Build product|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1004711/logs/774)|dotnet/runtime#114240| |[1004699](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004699)|dotnet/runtime|Build product|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1004699/logs/809)|dotnet/runtime#114227| |[1004337](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004337)|dotnet/runtime|Build product|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1004337/logs/2716)|dotnet/runtime#114223| |[1004520](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004520)|dotnet/runtime|Build product|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1004520/logs/1245)|dotnet/runtime#114164| |[1004465](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004465)|dotnet/runtime|Build product|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1004465/logs/1127)|dotnet/runtime#113765| |[1004416](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004416)|dotnet/runtime|Build product|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1004416/logs/555)|dotnet/runtime#114155| |[1004391](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004391)|dotnet/runtime|Build product|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1004391/logs/749)|dotnet/runtime#114227| |[1004340](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004340)|dotnet/runtime|Build product|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1004340/logs/300)|dotnet/runtime#114224| |[2678690](https://dev.azure.com/dnceng/internal/_build/results?buildId=2678690)|dotnet-runtime|Build product|[Log](https://dev.azure.com/dnceng/7ea9116e-9fac-403d-b258-b31fcf1bb293/_apis/build/builds/2678690/logs/1026)|| |[2678677](https://dev.azure.com/dnceng/internal/_build/results?buildId=2678677)|dotnet-runtime|Build product|[Log](https://dev.azure.com/dnceng/7ea9116e-9fac-403d-b258-b31fcf1bb293/_apis/build/builds/2678677/logs/1216)|| |[2678676](https://dev.azure.com/dnceng/internal/_build/results?buildId=2678676)|dotnet-runtime|Build product|[Log](https://dev.azure.com/dnceng/7ea9116e-9fac-403d-b258-b31fcf1bb293/_apis/build/builds/2678676/logs/1215)|| |[1004313](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004313)|dotnet/runtime|Build product|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1004313/logs/723)|dotnet/runtime#113313| |[1004210](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004210)|dotnet/runtime|Build product|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1004210/logs/563)|dotnet/runtime#114087| # Summary |24-Hour Hit Count|7-Day Hit Count|1-Month Count| |---|---|---| |19|19|19| <!--Known issue error report end -->
114232	area-Diagnostics-mono	[browser] EP testing	 dev tools profiler - dev tools only, manual test - AOT, interp, jiterp - callspec and instrumentation   event pipe profiler - AOT, interp, jiterp - callspec to filter visible methods - manual testing: dev tools - download, open in VS, find expected calls - manual testing: with `ds-router`, `dotnet-trace`, open in VS, find expected calls - WBT:       - use JS API to get promise of .nettrace bytes      - upload the file via HTTP       - parse and validate that trace contains expected method call   gc dump - manual testing: dev tools - download, open in VS, find expected classes - manual testing: with `ds-router`, `dotnet-gcdump collect`, `dotnet-gcdump convert`, open in VS, find expected classes - WBT:       - use JS API to get promise of .nettrace bytes      - upload the file via HTTP       - parse and validate that dump contains expected classes   counters trace  - manual testing: dev tools - download, open in VS, find expected counters, values - manual testing: with `ds-router`, `dotnet-counters collect`, open in VS, find expected counters, values - WBT:       - use JS API to get promise of .nettrace bytes      - upload the file via HTTP       - parse and validate that dump contains expected counters, values   performance - manually test all above on some real life app, rather than empty template   usability - provide feedback about ergonomy and future enhancements   notes  `.nettrace` messages could be parsed and validated using `Microsoft.Diagnostics.NETCore.Client` See [IpcMessage](https://github.com/dotnet/diagnostics/blob/main/src/Microsoft.Diagnostics.NETCore.Client/DiagnosticsIpc/IpcMessage.cs)  ```sh dotnet-dsrouter server-websocket -ws ws://127.0.0.1:8088/diagnostics ```  ```js globalThis.getDotnetRuntime(0).collectGcDump() globalThis.getDotnetRuntime(0).collectPerfCounters({durationSeconds: 60}) globalThis.getDotnetRuntime(0).collectCpuSamples({durationSeconds: 60}) globalThis.getDotnetRuntime(0).connectDSRouter ('ws://127.0.0.1:8088/diagnostics') ```
114230	area-System.IO	File.Move (overwrite) unreliable because FileShare.Delete access of target file ignored	  I detected a problem with `File.Move` which occurs more frequently if more antivirus scanning work is done (probably Defender ATP). IMO this is a bug in `MoveFileEx` win32api method but there doesn't seem to be a viable issue tracker for that and the failing example code is .NET anyway.   Environment is Windows 11, local hard drive (SSD), .NET 8 => nothing special.  When narrowing down errors I finally built a loop reproducing it:  ``` for(int i = 0; i < 100000; ++i) {   System.IO.File.WriteAllText(sourceFilePath, "test");   System.IO.File.Move(sourceFilePath, destFilePath, true); } ```  If you run this code with local filenames then `destFilePath` will be overwritten again and again. On a non-corporate Windows 11 Pro machine with standard defender this causes 0-2 errors in 100000 iterations.  Error message is "Access denied" and as far as I could see the target file is blocked (opened). My guess is that antivirus scanning of the written file is done AFTER the filestream is closed (WriteAllText method returns).  If you run this loop on a corparate machine with intensive scanning (defender ATP) there will be a failure more often. I saw failures every 50-100 iterations in average, sometimes on the first or second iteration.  My guess is the same as in this reddit: [constant_file_locking](https://www.reddit.com/r/DefenderATP/comments/181nmdo/constant_file_locking/?rdt=56822) Sounds very plausible to me for my problem: file probably is opened by antivirus with ShareMode: Read, Delete.  When I add `File.Delete(destFilePath)` before `File.Move` everything works fine -- but atomicity of the operation is lost. Internmediate situation is: old destination file already dropped, new not created yet. Therefore `File.Delete` is no viable replacement.  My example unit test below shows that `File.Delete(destination)` is allowed if destination file is not opened or just opened using `FileShare.Delete`. But calling `File.Move(..., destination, overwrite: true)` is _not_ allowed (causing an exception).  `File.Move` (`MoveFileEx`) must preceed with `overwrite: true` when file can be deleted. This should be fixed in the API / filesystem.  If this isn't possible a workaround would be this: `File.Move` would wait for any antivirus scanning engine to finish instead of just returning an error. This sounds like a bad design decision but logical if the antivirus scanning isn't fully transparent (which would be the correct solution, but obviously causing slow downs).   Of course this problem can be offloaded to the developer (try/catch/retry) or the user but I think it is a logic bug (either in File.Move or in antivirus integration) that should be fixed.   Reproduction Steps  ``` [Fact] void FileMoveBug() {  var sourceFilePath = Path.GetTempFileName();  var destFilePath = Path.GetTempFileName();    var msSenseSimulation = new FileStream(destFilePath, new FileStreamOptions()  {   Options = FileOptions.None,   Access = FileAccess.Read,   Mode = FileMode.Open,   Share = FileShare.Delete  });    // File.Delete(destFilePath); // this line fixes the code, but creates a small gap where destination file does not exist (not atomic anymore)  System.IO.File.Move(sourceFilePath, destFilePath, true);   msSenseSimulation.Dispose(); } ```   Expected behavior  If `File.Delete` works flawless then `File.Move(overwrite:true)` should, too.   Actual behavior  Unit test fails (see above).  In real world processes sometimes fail. Failure frequency seems to depend on performance / amount of antivirus scanning.   Regression?  _No response_   Known Workarounds  a) File.Delete (other semantics) b) try/catch/retry-loop everytime when calling `File.Move` with overwrite:true   Configuration  .NET 8 Windows 11 (Pro / Enterprise) x64 local filesystem   Other information  Related:   https://www.reddit.com/r/sysadmin/comments/xm5qow/comment/jamvwaa/?utm_source=share&utm_medium=web2x&context=3
114229	area-CodeGen-coreclr	JIT: Assertion failed '!"Inconsistent profile data"' during 'Importation'	 Build Information Build: https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004148&view=results Build error leg or test failing:  <!-- Error message template  -->  Error Message  Fill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).  <!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. -->  ```json {   "ErrorMessage": "Inconsistent profile data",   "BuildRetry": false,   "ExcludeConsoleLog": false } ```  Introduced by #114016. cc @dotnet/jit-contrib  <!-- Known issue validation start -->   Known issue validation **Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004148 **Error message validated:** `[Inconsistent profile data`] **Result validation:** :white_check_mark: Known issue matched with the provided build. **Validation performed at:** 4/3/2025 5:53:50 PM UTC <!-- Known issue validation end --> <!--Known issue error report start -->   Report  |Build|Definition|Test|Pull Request| |---|---|---|---| |[1004148](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004148)|dotnet/runtime|[Methodical_do.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004148&view=ms.vss-test-web.build-test-results-tab&runId=26799800&resultId=122517)|dotnet/runtime#113977| # Summary |24-Hour Hit Count|7-Day Hit Count|1-Month Count| |---|---|---| |1|1|1| <!--Known issue error report end -->
114222	area-GC-coreclr	[8.0] GC Large array test failure	 Build Information  Build: https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002908 Build error leg or test failing: coreclr linux x64 Checked no_tiered_compilation @ Ubuntu.2004.Amd64.Open   Error Message  ```json {   "ErrorMessage" : ["now try Int32.MaxValue-0:", "Array dimensions exceeded supported range."],   "BuildRetry" : false,   "ExcludeConsoleLog" : false } ```  - PR: https://github.com/dotnet/runtime/pull/113475 - Queue: `coreclr linux x64 Checked no_tiered_compilation` - Job result: https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002908&view=logs&j=c81c7d5b-8afb-5809-79b1-a180a61efadc&t=a1c46222-07fc-5cf8-54f7-a53ed2cd901a&l=30 - Log file: https://helixr1107v0xd1eu3ibi6ka.blob.core.windows.net/dotnet-runtime-refs-pull-113475-merge-1761bf7d8f8c457b82/PayloadGroup0/1/console.0a41e3f4.log?helixlogtype=result - Output: ```  Starting:    GC.LargeMemory.XUnitWrapper (parallel test collections = on, max threads = 2)     GC/LargeMemory/Regressions/largearraytest/largearraytest.sh [FAIL]       /datadisks/disk1/work/AFAD09E5/w/B36F09DF/e/GC/LargeMemory/Regressions/largearraytest/largearraytest.sh: line 454: 63489 Killed                  $LAUNCHER $ExePath "${CLRTestExecutionArguments[@]}"              Return code:      1       Raw output file:      /datadisks/disk1/work/AFAD09E5/w/B36F09DF/uploads/Reports/GC.LargeMemory/Regressions/largearraytest/largearraytest.output.txt       Raw output:       BEGIN EXECUTION       /datadisks/disk1/work/AFAD09E5/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true largearraytest.dll ''       now try Int32.MaxValue-0:        Array dimensions exceeded supported range.       now try Int32.MaxValue-1:        Array dimensions exceeded supported range.       now try Int32.MaxValue-2:        Array dimensions exceeded supported range.       now try Int32.MaxValue-3:        Array dimensions exceeded supported range.       now try Int32.MaxValue-4:        Array dimensions exceeded supported range. ... ...       Array dimensions exceeded supported range.       now try Int32.MaxValue-56: 2147483591       now try Int32.MaxValue-57: 2147483590       now try Int32.MaxValue-58: 2147483589       now try Int32.MaxValue-59: Expected: 100       Actual: 137       END EXECUTION - FAILED       Test failed. Trying to see if dump file was created in /home/helixbot/dotnetbuild/dumps since 4/3/2025 1:07:47 AM       Test Harness Exitcode is : 1       To run the test:       > set CORE_ROOT=/datadisks/disk1/work/AFAD09E5/p       > /datadisks/disk1/work/AFAD09E5/w/B36F09DF/e/GC/LargeMemory/Regressions/largearraytest/largearraytest.sh       Expected: True       Actual:   False       Stack Trace:            at GC_LargeMemory._Regressions_largearraytest_largearraytest_._Regressions_largearraytest_largearraytest_sh()            at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)            at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)       Output:         /datadisks/disk1/work/AFAD09E5/w/B36F09DF/e/GC/LargeMemory/Regressions/largearraytest/largearraytest.sh: line 454: 63489 Killed                  $LAUNCHER $ExePath "${CLRTestExecutionArguments[@]}"                  Return code:      1 ``` <!-- Known issue validation start -->   Known issue validation **Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002908 **Error message validated:** `[now try Int32.MaxValue-0: Array dimensions exceeded supported range.`] **Result validation:** :white_check_mark: Known issue matched with the provided build. **Validation performed at:** 4/3/2025 4:56:08 PM UTC <!-- Known issue validation end --> <!--Known issue error report start -->   Report  |Build|Definition|Test|Pull Request| |---|---|---|---| |[1004705](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004705)|dotnet/runtime|[GC/LargeMemory/Regressions/largearraytest/largearraytest.sh](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004705&view=ms.vss-test-web.build-test-results-tab&runId=26815558&resultId=119151)|| |[1004597](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004597)|dotnet/runtime|[GC/LargeMemory/Regressions/largearraytest/largearraytest.sh](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004597&view=ms.vss-test-web.build-test-results-tab&runId=26812416&resultId=105487)|| |[1004531](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004531)|dotnet/runtime|[PayloadGroup0.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004531&view=ms.vss-test-web.build-test-results-tab&runId=26811542&resultId=113286)|| |[1004293](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004293)|dotnet/runtime|[PayloadGroup0.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004293&view=ms.vss-test-web.build-test-results-tab&runId=26808456&resultId=120838)|| |[1004322](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004322)|dotnet/runtime|[GC/LargeMemory/Regressions/largearraytest/largearraytest.sh](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004322&view=ms.vss-test-web.build-test-results-tab&runId=26808386&resultId=120193)|| |[1004337](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004337)|dotnet/runtime|[PayloadGroup0.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004337&view=ms.vss-test-web.build-test-results-tab&runId=26809544&resultId=113286)|dotnet/runtime#114223| |[1002908](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002908)|dotnet/runtime|[PayloadGroup0.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002908&view=ms.vss-test-web.build-test-results-tab&runId=26771064&resultId=113286)|dotnet/runtime#113475| # Summary |24-Hour Hit Count|7-Day Hit Count|1-Month Count| |---|---|---| |6|7|7| <!--Known issue error report end -->
114221	area-Build-mono	Console APIs missing `[UnsupportedOSPlatform("wasi")]`	  For example, https://github.com/dotnet/runtime/blob/15872212c29cecc8d82da4548c3060f2614665f7/src/libraries/System.Console/src/System/Console.cs#L560-L564   Reproduction Steps  See https://github.com/microsoft/testfx/issues/5366   Expected behavior  Having `<SupportedPlatform Include="wasi" />` in csproj should warn me about the API not being supported.   Actual behavior  No warnings.   Regression?  _No response_   Known Workarounds  _No response_   Configuration  _No response_   Other information  _No response_
114219	area-System.Security	c0000005 at SHA256.HashData	I'm currently investigating a mysterious crash only a few users experience in one of my projects  ``` Fatal error. 0xC0000005    at System.Security.Cryptography.HashProviderDispenser+OneShotHashProvider.HashDataUsingPseudoHandle(System.String, System.ReadOnlySpan`1<Byte>, System.ReadOnlySpan`1<Byte>, Boolean, System.Span`1<Byte>, Int32 ByRef)    at System.Security.Cryptography.HashProviderDispenser+OneShotHashProvider.HashData(System.String, System.ReadOnlySpan`1<Byte>, System.Span`1<Byte>)    at System.Security.Cryptography.SHA256.TryHashData(System.ReadOnlySpan`1<Byte>, System.Span`1<Byte>, Int32 ByRef)    at System.Security.Cryptography.SHA256.HashData(System.ReadOnlySpan`1<Byte>, System.Span`1<Byte>)    at System.Security.Cryptography.SHA256.HashData(System.ReadOnlySpan`1<Byte>)    at System.Security.Cryptography.SHA256.HashData(Byte[])    ... ```  This occurs at this particular method: ```cs public static string GetAssemblyHash(Assembly assembly) {     try     {         return Convert.ToBase64String(SHA256.HashData(File.ReadAllBytes(assembly.Location)));     }     catch (Exception ex)     {         return $"Unknown ({ex.GetType().Name}: {ex.Message})"; // No stack trace     } } ```  This happens with very few users so its been difficult for me to gather further information that would help me pinpoint the issue.  Do we know what the cause might be?
114217	area-AssemblyLoader-coreclr	[android] EventPipe loader events on CoreCLR Android mixes relative/absolute paths.	EventPipe events like ModuleDCStop, DomainModuleDCStop, KnownPathProbed, ResolutionAttempted, KnownPathProbed, AssemblyLoaderStop mixes relative and absolute paths for assemblies in fileds like ModuleILPath, FilePath, ResultAssemblyPath etc. On OSX these paths tend to always be absolute. CoreCLR on Android should either use relative or absolute paths for these fields.  Data was primarily collected on Android sample HelloWorld in dotnet/runtime repro. In this scenario host extract all assemblies out of APK into internal file system on before running app, so this issue might be related to the host and/or how these paths are resolved when emitting the events. Once figured out on the sample, we should also verify that we get expected behavior when running together with dotnet Android SDK, since they use different solutions depending on how the app gets build. It also utilizes customization to assembly loader that would need to be validated together with above EventPipe events.
114216	area-Diagnostics-coreclr	[android] Nettrace collected on CoreCLR Android including JIT+Loader events won't display in Perfview Loader/JITStats views.	Collecting JIT and Loader data through EventPipe on Android CoreCLR works and include all expected information, but there seem to be some parsing error in Perfviews Runtime Loader and JITStats views. The following error occurs in perfviews log:  Started: Opening dotnet-dsrouter_20250402_152420.nettrace ETL Size 2.627 MB ETLX Size 2.668 MB Completed: Opening dotnet-dsrouter_20250402_152420.nettrace   (Elapsed Time: 0.056 sec) Started: Opening JITStats Completed: Opening JITStats   (Elapsed Time: 0.098 sec) Exception Occurred: System.IndexOutOfRangeException: Index was outside the bounds of the array.    at Microsoft.Diagnostics.Tracing.Analysis.TraceLoadedDotNetRuntime.<>c__DisplayClass32_0.<SetupCallbacks>b__16(GCMarkWithTypeTraceData data)    at Microsoft.Diagnostics.Tracing.TraceEventDispatcher.DoDispatch(TraceEvent anEvent)    at Microsoft.Diagnostics.Tracing.Etlx.TraceLogEventSource.Process()    at PerfView.PerfViewJitStats.WriteHtmlBody(TraceLog dataFile, TextWriter output, String fileName, TextWriter log)    at PerfView.PerfViewHtmlReport.GenerateReportFile(StatusBar worker, TraceLog trace)    at PerfView.PerfViewHtmlReport.<>c__DisplayClass17_1.<Open>b__0()    at PerfView.StatusBar.<>c__DisplayClass22_0.<StartWork>b__0() An exceptional condition occurred, see log for details. Started: Opening EventStats Completed: Opening EventStats   (Elapsed Time: 0.054 sec) Started: Opening myport.sock_20250402_144917.nettrace ETL Size 0.295 MB ETLX Size 0.125 MB Completed: Opening myport.sock_20250402_144917.nettrace   (Elapsed Time: 0.045 sec) Started: Opening EventStats Completed: Opening EventStats   (Elapsed Time: 0.000 sec)  Appears to be some issue with GC MarkWithType data events and might not be unique to Android, an OSX trace including the same GC event will also trigger this error.
114213	area-CodeGen-coreclr	JIT: `InstanceBasedFunctionPointer(useExplicitThis: True)` test fails with tailcallstress	Example pipeline run: https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003690&view=results Example workitem failure: https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003690&view=ms.vss-test-web.build-test-results-tab&runId=26787152&resultId=119191&paneView=debug Example console log: https://helixr1107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-heads-main-88e27b29d1e44cce98/System.Reflection.Emit.Lightweight.Tests/1/console.0de0687d.log  ```scala C:\h\w\AF6A093E\w\A61A0918\e>set DOTNET  DOTNET_TailcallStress=1 DOTNET_TieredCompilation=0  C:\h\w\AF6A093E\w\A61A0918\e>call RunTests.cmd --runtime-path C:\h\w\AF6A093E\p  ========================= Begin custom configuration settings ============================== set __IsXUnitLogCheckerSupported=1 set XUNIT_HIDE_PASSING_OUTPUT_DIAGNOSTICS=1 ========================== End custom configuration settings =============================== ----- start Thu 04/03/2025  8:27:33.98 ===============  To repro directly: ===================================================== pushd C:\h\w\AF6A093E\w\A61A0918\e\ "C:\h\w\AF6A093E\p\dotnet.exe" exec --runtimeconfig System.Reflection.Emit.Lightweight.Tests.runtimeconfig.json --depsfile System.Reflection.Emit.Lightweight.Tests.deps.json xunit.console.dll System.Reflection.Emit.Lightweight.Tests.dll -xml testResults.xml -nologo -nocolor -notrait category=IgnoreForCI -notrait category=OuterLoop -notrait category=failing  popd ===========================================================================================================  C:\h\w\AF6A093E\w\A61A0918\e>"C:\h\w\AF6A093E\p\dotnet.exe" exec --runtimeconfig System.Reflection.Emit.Lightweight.Tests.runtimeconfig.json --depsfile System.Reflection.Emit.Lightweight.Tests.deps.json xunit.console.dll System.Reflection.Emit.Lightweight.Tests.dll -xml testResults.xml -nologo -nocolor -notrait category=IgnoreForCI -notrait category=OuterLoop -notrait category=failing     Discovering: System.Reflection.Emit.Lightweight.Tests (method display = ClassAndMethod, method display options = None)   Discovered:  System.Reflection.Emit.Lightweight.Tests (found 41 test cases)   Starting:    System.Reflection.Emit.Lightweight.Tests (parallel test collections = on [4 threads], stop on fail = off)     System.Reflection.Emit.Tests.DynamicILInfoTests.InstanceBasedFunctionPointer(useExplicitThis: True) [FAIL]       System.InvalidProgramException : Common Language Runtime detected an invalid program.       Stack Trace:            at GetGuid(Object, IntPtr)         /_/src/libraries/System.Reflection.Emit.Lightweight/tests/DynamicILInfoTests.cs(707,0): at System.Reflection.Emit.Tests.DynamicILInfoTests.InstanceBasedFunctionPointer(Boolean useExplicitThis)         /_/src/coreclr/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.CoreCLR.cs(36,0): at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args)         /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs(174,0): at System.Reflection.MethodBaseInvoker.InvokeDirectByRefWithFewArgs(Object obj, Span`1 copyOfArgs, BindingFlags invokeAttr)   Finished:    System.Reflection.Emit.Lightweight.Tests === TEST EXECUTION SUMMARY ===    System.Reflection.Emit.Lightweight.Tests  Total: 78, Errors: 0, Failed: 1, Skipped: 0, Time: 3.281s ```  Most likely explicit tailcalls just do not handle explicit this correctly.  cc @dotnet/jit-contrib 
114212	area-CodeGen-coreclr	JIT: Assertion failed `IsVNConstantBound(vn) || IsVNConstantBoundUnsigned(vn)` during 'Assertion prop'	Failing in libraries-jitstress.  Example pipeline run: https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003690&view=results Example work item: https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003690&view=ms.vss-test-web.build-test-results-tab&runId=26787028&resultId=208858&paneView=debug Console log: https://helixr1107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-heads-main-0c378c0ef72a4423a4/System.Runtime.Tests/1/console.da2328c9.log?skoid=8eda00af-b5ec-4be9-b69b-0919a2338892&sktid=72f988bf-86f1-41af-91ab-2d7cd011db47&skt=2025-04-03T14%3A51%3A51Z&ske=2025-04-03T15%3A51%3A51Z&sks=b&skv=2024-11-04&sv=2024-11-04&st=2025-04-03T14%3A51%3A51Z&se=2025-04-03T15%3A51%3A51Z&sr=c&sp=r&sig=dE63TUrxRtL0yKA6Ghkit5WB9tEjSAi5zrJibrvRaDc%3D  ```scala C:\h\w\A7650909\w\A45D093E\e>type C:\h\w\A7650909\p\SetStressModes_jitstress2_tiered.cmd  set DOTNET_TieredCompilation=1 set DOTNET_JitStress=2 ... C:\h\w\A7650909\w\A45D093E\e>"C:\h\w\A7650909\p\dotnet.exe" exec --runtimeconfig System.Runtime.Tests.runtimeconfig.json --depsfile System.Runtime.Tests.deps.json xunit.console.dll System.Runtime.Tests.dll -xml testResults.xml -nologo -nocolor -notrait category=AdditionalTimezoneChecks -notrait category=IgnoreForCI -notrait category=OuterLoop -notrait category=failing     Discovering: System.Runtime.Tests (method display = ClassAndMethod, method display options = None)   Discovered:  System.Runtime.Tests (found 9396 of 9442 test cases)   Starting:    System.Runtime.Tests (parallel test collections = on [4 threads], stop on fail = off)     System.Tests.UIntPtrTests.GetHashCodeRespectAllBits [SKIP]       Condition(s) not met: "Is64Bit"     System.Tests.UIntPtrTests.Subtract [SKIP]       Condition(s) not met: "Is64Bit"     System.Tests.UIntPtrTests.TestExplicitCast [SKIP]       Condition(s) not met: "Is64Bit"     System.Tests.UIntPtrTests.TestCtor_VoidPointer_ToPointer [SKIP]       Condition(s) not met: "Is64Bit"     System.Tests.UIntPtrTests.Add [SKIP]       Condition(s) not met: "Is64Bit"     System.Tests.UIntPtrTests.TestSize [SKIP]       Condition(s) not met: "Is64Bit"     System.Tests.UIntPtrTests.Ctor_ULong [SKIP]       Condition(s) not met: "Is64Bit"     System.Tests.StringTests.LastIndexOf_Ordinal_Misc [SKIP]       Condition(s) not met: "IsIcuGlobalization"     System.Tests.StringTests.IndexOf_Ordinal_Misc [SKIP]       Condition(s) not met: "IsIcuGlobalization"     System.Tests.StringTests.EndsWith_Ordinal_Misc [SKIP]       Condition(s) not met: "IsIcuGlobalization"     System.Tests.StringTests.StartsWith_Ordinal_Misc [SKIP]       Condition(s) not met: "IsIcuGlobalization"     System.Tests.StringTests.Compare_Ordinal_Misc [SKIP]       Condition(s) not met: "IsIcuGlobalization"     System.Runtime.Tests.JitInfoTests.JitInfoIsNotPopulated [SKIP]       Condition(s) not met: "IsMonoAOT"     System.Text.Tests.RuneTests.ICU_Casing_Invariant [SKIP]       Condition(s) not met: "IsIcuGlobalization"     System.Tests.ArgIteratorTests.ArgIterator_Throws_PlatformNotSupportedException [SKIP]       Condition(s) not met: "IsArgIteratorNotSupported"     System.Tests.IntPtrTests.TestExplicitCast [SKIP]       Condition(s) not met: "Is64Bit"     System.Tests.IntPtrTests.Size [SKIP]       Condition(s) not met: "Is64Bit"     System.Tests.IntPtrTests.Add [SKIP]       Condition(s) not met: "Is64Bit"     System.Tests.IntPtrTests.Subtract [SKIP]       Condition(s) not met: "Is64Bit"     System.Tests.DateTimeOffsetTests.ToLocalTime_MaxValue [SKIP]       Condition(s) not met: "IsMaxValuePositiveLocalOffset"     System.Tests.IntPtrTests.GetHashCodeRespectAllBits [SKIP]       Condition(s) not met: "Is64Bit"     System.Tests.DateTimeOffsetTests.ToLocalTime_MinValue [SKIP]       Condition(s) not met: "IsMinValueNegativeLocalOffset"     System.Tests.IntPtrTests.Ctor_VoidPointer_ToPointer [SKIP]       Condition(s) not met: "Is64Bit"     System.Tests.IntPtrTests.Ctor_Long [SKIP]       Condition(s) not met: "Is64Bit"     System.Tests.DateTimeOffsetTests.ToLocalTime_Ambiguous [SKIP]       Condition(s) not met: "IsPacificTime"  Assert failure(PID 7140 [0x00001be4], Thread: 6544 [0x1990]): Assertion failed 'IsVNConstantBound(vn) || IsVNConstantBoundUnsigned(vn)' in 'System.Runtime.MemoryFailPoint:.ctor(int):this' during 'Assertion prop' (IL size 507; hash 0x205dea63; Instrumented Tier1)      File: D:\a\_work\1\s\src\coreclr\jit\valuenum.cpp:6953     Image: C:\h\w\A7650909\p\dotnet.exe ```  cc @dotnet/jit-contrib 
114206	area-VM-coreclr	Apple Sillicon Rosetta2 .NET9 deadlock	  Hello, we are developing MVVM cross-platform desktop app using .NET and Avalonia UI (v11.0.11) and we are experiencing random deadlocks in xUnit tests (UI tests using Avalonia Headless platform) when the following code is called:  ```csharp IntPtr handle = 0; try {     return NativeLibrary.TryLoad(path, out handle) && NativeLibrary.TryGetExport(handle, "C_GetFunctionList", out _); } finally {     NativeLibrary.Free(handle); } ```  The code is called several times within one test case (fact in xUnit). Parallel test runs are disabled. We tried to use lock, mutex, semaphor around the code above with no luck. When we commented out this part of the code then the deadlocks did not appear.   We are not able to get process dump using dotnet-dump because this hanged too after attaching to deadlocked process (also dotnet-trace hanged). We were able to get dump using spindump though, the output is as follows:  Date/Time:        2025-04-02 18:53:37.130 +0200 End time:         2025-04-02 18:53:47.127 +0200 OS Version:       macOS 15.3.2 (Build 24D81) Architecture:     arm64e Report Version:   55  Data Source:      Stackshots Shared Cache:     5700D77A-6190-36E0-884D-FEE6D586D62F slid base address 0x18476c000, slide 0x476c000 (System Primary) Shared Cache:     30EB0E49-EBB3-34EC-A62A-EAAC33A8C7A2 slid base address 0x7ff815f08000, slide 0x15f08000 (Rosetta) Shared Cache:     2CE61F01-A42A-375D-8D6E-89C3E585622D slid base address 0x1891c0000, slide 0x91c0000 (DriverKit)  Command:          dotnet Path:             /usr/local/share/dotnet/x64/dotnet Codesigning ID:   dotnet-55554944d2c84aeb814f39048bc0563da76cae94 Team ID:          UBF8T346G9 Architecture:     x86_64 (translated) Parent:           dotnet [97220] [unique pid 593303] Responsible:      Terminal [1202] PID:              97222 Time Since Fork:  528s Deadlocked:       2 threads - Thread 0x457a02, Thread 0x457a07 ".NET TP Worker" Blocked by Deadlock: 1 thread - Thread 0x45a689  Duration:         10.00s Steps:            999 (10ms sampling interval)  Hardware model:   Mac15,3 Active cpus:      8 HW page size:     16384 VM page size:     16384  Time Since Boot:  545242s Time Awake Since Boot: 142912s Time Since Wake:  1633s  Fan speed:        0 rpm Total CPU Time:   17.662s (38.4G cycles, 90.4G instructions, 0.42c/i) Advisory levels:  Battery -> 2, User -> 2, ThermalPressure -> 0, Combined -> 2 Free disk space:  592.11 GB/926.35 GB, low space threshold 3072 MB Vnodes Available: 73.81% (194249/263168) Models:           none  Deadlock:         dotnet [97222] [unique pid 593305] thread 0x457a07 ".NET TP Worker" -> dotnet [97222] [unique pid 593305] thread 0x457a02 -> dotnet [97222] [unique pid 593305] thread 0x457a07 ".NET TP Worker" Blocked by Deadlock: 1 task - dotnet [97222] [unique pid 593305]  Preferred User Language: cs-CZ Country Code:     CZ OS Cryptex File Extents: 1  ------------------------------------------------------------ Heavy format: stacks are sorted by count Use -i and -timeline to re-report with chronological sorting ------------------------------------------------------------    Process:          dotnet [97222] [unique pid 593305] UUID:             D2C84AEB-814F-3904-8BC0-563DA76CAE94 Path:             /usr/local/share/dotnet/x64/dotnet Codesigning ID:   dotnet-55554944d2c84aeb814f39048bc0563da76cae94 Team ID:          UBF8T346G9 Shared Cache:     30EB0E49-EBB3-34EC-A62A-EAAC33A8C7A2 slid base address 0x7ff815f08000, slide 0x15f08000 (Rosetta) Architecture:     x86_64 (translated) Parent:           dotnet [97220] [unique pid 593303] Responsible:      Terminal [1202] UID:              1162186508 Footprint:        323.85 MB Time Since Fork:  528s Num samples:      999 (1-999) Note:             Suspended for 1 sample Num threads:      31 Deadlocked:       2 threads - Thread 0x457a02, Thread 0x457a07 ".NET TP Worker" Blocked by Deadlock: 1 thread - Thread 0x45a689    Thread 0x45794d    999 samples (1-999)    priority 31 (base 31)   999  <truncated backtrace>    *999  psynch_cvcontinue + 0 (com.apple.kec.pthread + 17956) [0xfffffe000ba7f184] (suspended)    Thread 0x45794f    Thread name "com.apple.rosetta.exceptionserver"    999 samples (1-999)    priority 31 (base 31)   999  ??? (runtime + 70848) [0x7ff7ffc844c0]     999  <patched truncated backtrace>       999  ??? (runtime + 16032) [0x7ff7ffc76ea0]        *998  ??? (kernel.release.t8122 + 240448) [0xfffffe0008712b40]        *1    ??? (kernel.release.t8122 + 240448) [0xfffffe0008712b40] (suspended)    Thread 0x457952    999 samples (1-999)    priority 31 (base 31)   999  <truncated backtrace>    *999  ??? (kernel.release.t8122 + 240448) [0xfffffe0008712b40] (suspended)    Thread 0x457953    Thread name ".NET SynchManager"    999 samples (1-999)    priority 31 (base 31)   999  <truncated backtrace>    *999  ??? (kernel.release.t8122 + 5678516) [0xfffffe0008c425b4] (suspended)    Thread 0x457954    Thread name ".NET EventPipe"    999 samples (1-999)    priority 31 (base 31)   999  <truncated backtrace>    *999  ??? (kernel.release.t8122 + 30836) [0xfffffe00086df874]      *999  ??? (kernel.release.t8122 + 30896) [0xfffffe00086df8b0]        *999  ??? (kernel.release.t8122 + 1763204) [0xfffffe0008886784]          *999  ??? (kernel.release.t8122 + 7126120) [0xfffffe0008da3c68]            *999  ??? (kernel.release.t8122 + 6073832) [0xfffffe0008ca2de8]              *999  ??? (kernel.release.t8122 + 5677968) [0xfffffe0008c42390]                *999  ??? (kernel.release.t8122 + 590156) [0xfffffe000876814c]                  *999  ??? (kernel.release.t8122 + 596388) [0xfffffe00087699a4] (suspended)    Thread 0x457955    Thread name ".NET DebugPipe"    999 samples (1-999)    priority 31 (base 31)   999  <truncated backtrace>    *999  ??? (kernel.release.t8122 + 30836) [0xfffffe00086df874]      *999  ??? (kernel.release.t8122 + 30896) [0xfffffe00086df8b0]        *999  ??? (kernel.release.t8122 + 1763204) [0xfffffe0008886784]          *999  ??? (kernel.release.t8122 + 7126120) [0xfffffe0008da3c68]            *999  ??? (kernel.release.t8122 + 2528124) [0xfffffe000894137c]              *999  ??? (kernel.release.t8122 + 2524488) [0xfffffe0008940548]                *999  ??? (kernel.release.t8122 + 2621332) [0xfffffe0008957f94]                  *999  fifo_open + 1056 (kernel.release.t8122 + 2726536) [0xfffffe0008971a88]                    *999  ??? (kernel.release.t8122 + 5930756) [0xfffffe0008c7ff04]                      *999  lck_mtx_sleep + 228 (kernel.release.t8122 + 496728) [0xfffffe0008751458]                        *999  ??? (kernel.release.t8122 + 590156) [0xfffffe000876814c]                          *999  ??? (kernel.release.t8122 + 596388) [0xfffffe00087699a4] (suspended)    Thread 0x457956    Thread name ".NET Debugger"    999 samples (1-999)    priority 31 (base 31)   999  <truncated backtrace>    *999  psynch_cvcontinue + 0 (com.apple.kec.pthread + 17956) [0xfffffe000ba7f184] (suspended)    Thread 0x457957    999 samples (1-999)    priority 33 (base 33)   999  <truncated backtrace>    *999  ??? (kernel.release.t8122 + 776632) [0xfffffe00087959b8] (suspended)    Thread 0x457958    999 samples (1-999)    priority 31 (base 31)   999  <truncated backtrace>    *999  ??? (kernel.release.t8122 + 776632) [0xfffffe00087959b8] (suspended)    Thread 0x457959    999 samples (1-999)    priority 31 (base 31)   999  <truncated backtrace>    *999  psynch_cvcontinue + 0 (com.apple.kec.pthread + 17956) [0xfffffe000ba7f184] (suspended)    Thread 0x45795a    Thread name ".NET TP Worker"    999 samples (1-999)    priority 31 (base 31)   999  <truncated backtrace>    *999  ??? (kernel.release.t8122 + 776632) [0xfffffe00087959b8] (suspended)    Thread 0x45795b    999 samples (1-999)    priority 31 (base 31)   999  <truncated backtrace>    *999  ??? (kernel.release.t8122 + 776632) [0xfffffe00087959b8] (suspended)    Thread 0x45795c    999 samples (1-999)    priority 31 (base 31)   999  <truncated backtrace>    *999  psynch_cvcontinue + 0 (com.apple.kec.pthread + 17956) [0xfffffe000ba7f184] (suspended)    Thread 0x45795d    999 samples (1-999)    priority 31 (base 31)   999  <truncated backtrace>    *999  ??? (kernel.release.t8122 + 776632) [0xfffffe00087959b8] (suspended)    Thread 0x45795e    Thread name ".NET TP Worker"    999 samples (1-999)    priority 31 (base 31)   999  <truncated backtrace>    *999  psynch_cvcontinue + 0 (com.apple.kec.pthread + 17956) [0xfffffe000ba7f184] (suspended)    Thread 0x45795f    999 samples (1-999)    priority 31 (base 31)   999  <truncated backtrace>    *999  ??? (kernel.release.t8122 + 5678516) [0xfffffe0008c425b4] (suspended)    Thread 0x457960    999 samples (1-999)    priority 31 (base 31)   999  <truncated backtrace>    *999  psynch_cvcontinue + 0 (com.apple.kec.pthread + 17956) [0xfffffe000ba7f184] (suspended)    Thread 0x457963    Thread name ".NET TP Worker"    999 samples (1-999)    priority 31 (base 31)   999  <truncated backtrace>    *999  ??? (kernel.release.t8122 + 776632) [0xfffffe00087959b8] (suspended)    Thread 0x457966    999 samples (1-999)    priority 31 (base 31)   999  <truncated backtrace>    *999  psynch_cvcontinue + 0 (com.apple.kec.pthread + 17956) [0xfffffe000ba7f184] (suspended)    Thread 0x457967    Thread name ".NET TP Worker"    999 samples (1-999)    priority 31 (base 31)   999  <truncated backtrace>    *999  ??? (kernel.release.t8122 + 776632) [0xfffffe00087959b8] (suspended)    Thread 0x457968    999 samples (1-999)    priority 31 (base 31)   999  <truncated backtrace>     999  ??? (runtime + 141652) [0x7ff7ffc95954]      *999  ??? (kernel.release.t8122 + 776632) [0xfffffe00087959b8] (suspended)    Thread 0x457969    999 samples (1-999)    priority 31 (base 31)   999  <truncated backtrace>     999  ??? (runtime + 141652) [0x7ff7ffc95954]      *999  ??? (kernel.release.t8122 + 776632) [0xfffffe00087959b8] (suspended)    Thread 0x45796a    999 samples (1-999)    priority 31 (base 31)   999  <truncated backtrace>     999  ??? (runtime + 141652) [0x7ff7ffc95954]      *999  ??? (kernel.release.t8122 + 776632) [0xfffffe00087959b8] (suspended)    Thread 0x45796c    999 samples (1-999)    priority 31 (base 31)   999  <truncated backtrace>    *999  ??? (kernel.release.t8122 + 240448) [0xfffffe0008712b40] (suspended)    Thread 0x4579ce    Thread name ".NET SigHandler"    999 samples (1-999)    priority 31 (base 31)   999  <truncated backtrace>    *999  ??? (kernel.release.t8122 + 30836) [0xfffffe00086df874]      *999  ??? (kernel.release.t8122 + 30896) [0xfffffe00086df8b0]        *999  ??? (kernel.release.t8122 + 1763204) [0xfffffe0008886784]          *999  ??? (kernel.release.t8122 + 7126120) [0xfffffe0008da3c68]            *999  ??? (kernel.release.t8122 + 6061244) [0xfffffe0008c9fcbc]              *999  ??? (kernel.release.t8122 + 6060752) [0xfffffe0008c9fad0]                *999  ??? (kernel.release.t8122 + 6087928) [0xfffffe0008ca64f8]                  *999  ??? (kernel.release.t8122 + 5930756) [0xfffffe0008c7ff04]                    *999  lck_mtx_sleep + 228 (kernel.release.t8122 + 496728) [0xfffffe0008751458]                      *999  ??? (kernel.release.t8122 + 590156) [0xfffffe000876814c]                        *999  ??? (kernel.release.t8122 + 596388) [0xfffffe00087699a4] (suspended)    Thread 0x4579ec    Thread name ".NET TP Worker"    999 samples (1-999)    priority 31 (base 31)   999  <truncated backtrace>    *999  ??? (kernel.release.t8122 + 776632) [0xfffffe00087959b8] (suspended)    Thread 0x4579f7    Thread name ".NET TP Worker"    999 samples (1-999)    priority 31 (base 31)   999  <truncated backtrace>    *999  ??? (kernel.release.t8122 + 776632) [0xfffffe00087959b8] (suspended)    Thread 0x457a02    999 samples (1-999)    priority 31 (base 31)   999  <truncated backtrace>    *867  ??? (kernel.release.t8122 + 6101884) [0xfffffe0008ca9b7c] (blocked by turnstile waiting for dotnet [97222] [unique pid 593305] thread 0x457a07 - part of a deadlock)    *131  ??? (kernel.release.t8122 + 6101884) [0xfffffe0008ca9b7c] (blocked by turnstile waiting for dotnet [97222] [unique pid 593305] thread 0x457a07)    *1    ??? (kernel.release.t8122 + 6101884) [0xfffffe0008ca9b7c] (suspended, blocked by turnstile waiting for dotnet [97222] [unique pid 593305] thread 0x457a07)    Thread 0x457a07    Thread name ".NET TP Worker"    999 samples (1-999)    priority 31 (base 31)   999  <truncated backtrace>    *867  ??? (kernel.release.t8122 + 6101884) [0xfffffe0008ca9b7c] (blocked by turnstile waiting for dotnet [97222] [unique pid 593305] thread 0x457a02 - part of a deadlock)    *131  ??? (kernel.release.t8122 + 6101884) [0xfffffe0008ca9b7c] (blocked by turnstile waiting for dotnet [97222] [unique pid 593305] thread 0x457a02)    *1    ??? (kernel.release.t8122 + 6101884) [0xfffffe0008ca9b7c] (suspended, blocked by turnstile waiting for dotnet [97222] [unique pid 593305] thread 0x457a02)    Thread 0x457a0a    999 samples (1-999)    priority 31 (base 31)   999  <truncated backtrace>    *999  psynch_cvcontinue + 0 (com.apple.kec.pthread + 17956) [0xfffffe000ba7f184] (suspended)    Thread 0x45a689    999 samples (1-999)    priority 31 (base 31)   999  ??? (runtime + 80168) [0x7ff7ffc86928]     999  <patched truncated backtrace>       999  ??? (runtime + 15720) [0x7ff7ffc76d68]        *998  ??? (kernel.release.t8122 + 6101884) [0xfffffe0008ca9b7c] (blocked by turnstile waiting for dotnet [97222] [unique pid 593305] thread 0x457a07)        *1    ??? (kernel.release.t8122 + 6101884) [0xfffffe0008ca9b7c] (suspended, blocked by turnstile waiting for dotnet [97222] [unique pid 593305] thread 0x457a07)    Binary Images:            0x1049b2000 -        0x1049c5fff  dotnet (0)                        <D2C84AEB-814F-3904-8BC0-563DA76CAE94>             /usr/local/share/dotnet/x64/dotnet         0x7ff7ffc73000 -     0x7ff7ffcb2fff  runtime (342)                     <11B18945-107E-3E0D-91FA-B5D5ADA3C0C4>             /usr/libexec/rosetta/runtime    *0xfffffe00086d8000 - 0xfffffe0008f9bfff  kernel.release.t8122 (11215.81.4) <11F36980-B7BB-30DE-98D4-D52EEA979C99>__TEXT_EXEC  /System/Library/Kernels/kernel.release.t8122    *0xfffffe000ba7ab60 - 0xfffffe000ba80787  com.apple.kec.pthread (535)       <DFDE7E1F-D2D1-3F8E-82FE-D70C521CCB96>__TEXT_EXEC  com.apple.kec.pthread   Process:          AccessibilityVisualsAgent [91787] [unique pid 587870] UUID:             9525C44B-57F0-3FC8-93AE-EEE0FE10225D Path:             /System/Library/PrivateFrameworks/AccessibilitySupport.framework/Versions/A/Resources/AccessibilityVisualsAgent.app/Contents/MacOS/AccessibilityVisualsAgent Identifier:       com.apple.AccessibilityVisualsAgent Version:          1.0 (387.5.2) Build Version:    11 Project Name:     AccessibilitySupport Source Version:   387005002000000 Is First Party:   Yes Beta Identifier:  07525918-8D51-58D5-91B4-457E918933C9 Shared Cache:     5700D77A-6190-36E0-884D-FEE6D586D62F slid base address 0x18476c000, slide 0x476c000 (System Primary) Architecture:     arm64e Parent:           launchd [1] UID:              1162186508 Sudden Term:      Tracked (allows idle exit) Footprint:        13.03 MB Time Since Fork:  1629s Num samples:      999 (1-999) Num threads:      3 Note:             1 idle work queue thread omitted    Thread 0x44dfc5    999 samples (1-999)    priority 31 (base 31)   999  start + 2840 (dyld + 25204) [0x184838274]     999  ??? (AccessibilityVisualsAgent + 42776) [0x104ada718]       999  -[NSApplication run] + 480 (AppKit + 190580) [0x188809874]         999  -[NSApplication(NSEventRouting) _nextEventMatchingEventMask:untilDate:inMode:dequeue:] + 688 (AppKit + 10099748) [0x18917cc24]           999  _DPSNextEvent + 660 (AppKit + 243784) [0x188816848]             999  _BlockUntilNextEventMatchingListInModeWithFilter + 76 (HIToolbox + 1119496) [0x190213508]               999  ReceiveNextEventCommon + 676 (HIToolbox + 1119048) [0x190213348]                 999  RunCurrentEventLoopInMode + 292 (HIToolbox + 1094960) [0x19020d530]                   999  CFRunLoopRunSpecific + 588 (CoreFoundation + 505652) [0x184c9e734]                     999  __CFRunLoopRun + 1212 (CoreFoundation + 508588) [0x184c9f2ac]                       999  __CFRunLoopServiceMachPort + 160 (CoreFoundation + 514636) [0x184ca0a4c]                         999  mach_msg + 24 (libsystem_kernel.dylib + 4764) [0x184b7729c]                           999  mach_msg_overwrite + 480 (libsystem_kernel.dylib + 39672) [0x184b7faf8]                             999  mach_msg2_trap + 8 (libsystem_kernel.dylib + 3924) [0x184b76f54]                              *999  ??? (kernel.release.t8122 + 240448) [0xfffffe0008712b40]    Thread 0x44e077    Thread name "com.apple.NSEventThread"    999 samples (1-999)    priority 37 (base 37)   999  thread_start + 8 (libsystem_pthread.dylib + 8444) [0x184bb30fc]     999  _pthread_start + 136 (libsystem_pthread.dylib + 29412) [0x184bb82e4]       999  _NSEventThread + 148 (AppKit + 1442424) [0x18893b278]         999  CFRunLoopRunSpecific + 588 (CoreFoundation + 505652) [0x184c9e734]           999  __CFRunLoopRun + 1212 (CoreFoundation + 508588) [0x184c9f2ac]             999  __CFRunLoopServiceMachPort + 160 (CoreFoundation + 514636) [0x184ca0a4c]               999  mach_msg + 24 (libsystem_kernel.dylib + 4764) [0x184b7729c]                 999  mach_msg_overwrite + 480 (libsystem_kernel.dylib + 39672) [0x184b7faf8]                   999  <patched truncated backtrace>                     999  mach_msg2_trap + 8 (libsystem_kernel.dylib + 3924) [0x184b76f54]                      *999  ??? (kernel.release.t8122 + 240448) [0xfffffe0008712b40]    Binary Images:            0x104ad0000 -        0x104aebfff  com.apple.AccessibilityVisualsAgent 1.0 (387.5.2) <9525C44B-57F0-3FC8-93AE-EEE0FE10225D>             /System/Library/PrivateFrameworks/AccessibilitySupport.framework/Versions/A/Resources/AccessibilityVisualsAgent.app/Contents/MacOS/AccessibilityVisualsAgent            0x184832000 -        0x1848b3f3f  dyld (1245.1)                                     <398A133C-9BCB-317F-A064-A40D3CEA3C0F>             /usr/lib/dyld            0x184b76000 -        0x184bb0ff7  libsystem_kernel.dylib (11215.81.4)               <EEE9D0D3-DFFC-37CB-9CED-B27CD0286D8C>             /usr/lib/system/libsystem_kernel.dylib            0x184bb1000 -        0x184bbdfff  libsystem_pthread.dylib (535)                     <642FAF7A-874E-37E6-8ABA-2B0CC09A3025>             /usr/lib/system/libsystem_pthread.dylib            0x184c23000 -        0x185117fff  com.apple.CoreFoundation 6.9 (3302.1.400)         <190E6A36-FCAA-3EA3-94BB-7009C44653DA>             /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation            0x1887db000 -        0x189c17fff  com.apple.AppKit 6.9 (2575.40.6)                  <B88A44C1-D617-33DC-90ED-B6AB417C428E>             /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit            0x190102000 -        0x190409fff  com.apple.HIToolbox 2.1.1 (1219.3)                <950F1236-ACAF-379D-819F-6C6B0B5DEABD>             /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/HIToolbox.framework/Versions/A/HIToolbox    *0xfffffe00086d8000 - 0xfffffe0008f9bfff  kernel.release.t8122 (11215.81.4)                 <11F36980-B7BB-30DE-98D4-D52EEA979C99>__TEXT_EXEC  /System/Library/Kernels/kernel.release.t8122  We understand that there is a deadlock on the kernel level but we do not know how to get rid off it, any advice? Thank you.   Reproduction Steps  we are going to try to attach minimal repro project   Expected behavior  no deadlock   Actual behavior  deadlock   Regression?  _No response_   Known Workarounds  _No response_   Configuration  macOS: 15.3.2 app and test architecture: x64 (using Rosetta2) cpu: Apple Sillicon M3 (Arm64) .NET SDK: 9.0.201 xUnit nuget: 2.9.3 xUnit Runner nuget: 3.0.2 AvaloniaUI nuget: 11.0.11   Other information  _No response_
114205	area-CodeGen-coreclr	JIT: See if we can/should replace heap class layouts by custom layouts	Class layouts today can be created from either ref classes or value classes. I believe the former capability is only used by object stack allocation, yet everyone pays for additional JIT-EE calls when creating class layouts. We should see if we can/want to replace this by custom layouts created inside object stack allocation instead.  A few things to consider: 1. I am not sure if `getHeapClassSize` can be removed or not in favor of `getClassSize`. But we can certainly switch the use to happen inside objectalloc instead. 2. `getTypeLayout` today bails for non value classes. It means we are not making use of padding information during promotion of stack-allocated heap classes. 3. We should be able to remove `ClassLayout::IsValueClass` as well.
114204	area-CodeGen-coreclr	JIT: We can remove `getTypeForBoxOnStack`	We should be able to replace this with custom layouts and get rid of this JIT-EE method and the type definition in SPC.
114202	area-Diagnostics-coreclr	[Question] Need help obtaining assembly dependencies	There is a DLL written in native C++ using CLR Profiling API. I need to build a dependency tree of all managed assemblies/modules of the process, starting from its main module, using the same native C++, possibly using the same CLR Profiling API or other arsenal of the CLR. For each assembly/module, I need to know the full path to it.  Something like this approach in C#, but in **unmanaged** C++.  ```c# Dictionary<string, List<string>> GetDependencies(string assemblyPath) {     var dependencies = new Dictionary<string, List<string>>();     var assembly = Assembly.LoadFrom(assemblyPath);     var referencedAssemblies = assembly.GetReferencedAssemblies();      dependencies[assembly.FullName] = new List<string> { assembly.Location };     foreach (var referencedAssembly in referencedAssemblies)     {         string referencedAssemblyPath = Path.Combine(Path.GetDirectoryName(assemblyPath), referencedAssembly.Name + ".dll");         dependencies[assembly.FullName].Add(referencedAssemblyPath);         var subDependencies = GetDependencies(referencedAssemblyPath);         foreach (var subDependency in subDependencies)         {             if (!dependencies.ContainsKey(subDependency.Key))             {                 dependencies[subDependency.Key] = subDependency.Value;             }         }     }      return dependencies; } ```  How can this be implemented? Please give me some hints.  Ideally, I need a solution that would work for all versions of .NET/Core/Framework.  For some reason, the profiler callbacks `AssemblyLoadStarted` / `AssemblyLoadFinished` are not called for me (given the correct event mask). Therefore, solutions with these methods are unlikely to help.
114198	area-Infrastructure-mono	[mobile] Replace `<TrimMode>link</TrimMode>` in mobile targets	We currently use `<TrimMode>link</TrimMode>` in many mobile (Android/Apple) target/rpoject files while the officially supported options are `full` and `partial` (https://learn.microsoft.com/en-us/dotnet/core/deploying/trimming/trimming-options#trimming-granularity). The default SDK TrimMode is `full`.  Android usage: - https://github.com/dotnet/runtime/blob/15872212c29cecc8d82da4548c3060f2614665f7/src/mono/msbuild/android/build/AndroidBuild.InTree.props#L10 - https://github.com/dotnet/runtime/blob/15872212c29cecc8d82da4548c3060f2614665f7/src/mono/sample/Android/AndroidSampleApp.csproj#L9  Apple usage: - https://github.com/dotnet/runtime/blob/15872212c29cecc8d82da4548c3060f2614665f7/src/mono/sample/iOS/Program.csproj#L15 - https://github.com/dotnet/runtime/blob/15872212c29cecc8d82da4548c3060f2614665f7/src/mono/msbuild/apple/build/AppleBuild.InTree.props#L10 - https://github.com/dotnet/runtime/blob/15872212c29cecc8d82da4548c3060f2614665f7/src/mono/msbuild/apple/build/AppleBuild.LocalBuild.targets#L29  Test: - https://github.com/dotnet/runtime/blob/15872212c29cecc8d82da4548c3060f2614665f7/eng/testing/tests.mobile.targets#L98
114197	area-System.Diagnostics	[API Proposal]: Mark DynamicallyAccessedMemberTypes.All as EditorBrowsable(Never)	 Background and motivation  When `DynamicallyAccessedMemberTypes.All` was added, we had:  ```   PublicParameterlessConstructor = 0x0001,   PublicConstructors = 0x0002 | PublicParameterlessConstructor,   NonPublicConstructors = 0x0004,   PublicMethods = 0x0008,   NonPublicMethods = 0x0010,   PublicFields = 0x0020,   NonPublicFields = 0x0040,   PublicNestedTypes = 0x0080,   NonPublicNestedTypes = 0x0100,   PublicProperties = 0x0200,   NonPublicProperties = 0x0400,   PublicEvents = 0x0800,   NonPublicEvents = 0x1000,   Interfaces = 0x2000, ```  The `.All` annotation did everything the above mentioned ones do and on top of that:  1. Made privates in base types available (this was not expressible with the more granular annotation) 2. Made members of implemented interfaces available for reflection. This is a very niche use case and up until #114149 it wasn't even possible to take advantage of it without triggering trimming warnings.  Since then, we added more granular annotations to cover all use cases in 1 (#88512). The only extra thing that `.All` can do at this point is the members on interfaces.  People only very rarely have a need to use `.All`. But they use it [_a lot_](https://github.com/search?q=DynamicallyAccessedMemberTypes.All&type=code) due to laziness. This has two problems:  1. Size. The size impact can be significant, I just saw a 6+% size impact. 2. Declaring one wants to reflect on more members than are actually needed leads to spurious warnings (e.g. https://github.com/dotnet/runtime/discussions/112562#discussioncomment-12224659).  There is a huge value in being as specific as possible. The `.All` annotation is too wide.   API Proposal  ```csharp namespace System.Diagnostics.CodeAnalysis;  [Flags] public enum DynamicallyAccessedMemberTypes {     [EditorBrowsable(EditorBrowsableState.Never)]     All, // existing member } ```    API Usage  Don't use the API.   Alternative Designs  _No response_   Risks  _No response_
114193	area-NativeAOT-coreclr	在一个EXE应用程序中调用多个由.NET9 AOT发布的动态库so文件会引发异常	  在一个EXE应用程序中调用多个由.NET9 AOT发布的动态库so文件会引发异常   Reproduction Steps  ![Image](https://github.com/user-attachments/assets/45ce9289-aa77-4983-b16a-4fb1f6f1ee69)  ![Image](https://github.com/user-attachments/assets/cacc5a26-c970-463c-9882-8d1df8661bac)  ![Image](https://github.com/user-attachments/assets/550511d6-ceaa-46c4-b3b5-9c99c1477136)  AOT编译命令：  ![Image](https://github.com/user-attachments/assets/3afb3162-4da8-4f6e-ac11-4e90b36b7e3f)  C语言调用代码：  ![Image](https://github.com/user-attachments/assets/96b5a9b7-441e-4f66-9ec9-8303604d49cd)  ![Image](https://github.com/user-attachments/assets/1f62aa74-f2e9-4ff3-8f65-bdae2b41ab26)  调用结果：  ![Image](https://github.com/user-attachments/assets/ddabfc43-e3b4-41ab-83d9-02b9c1a693fd)     Expected behavior  在一个EXE中应该是允许调用多个由.NET AOT编译的动态库的   Actual behavior  在一个EXE中应该是允许调用多个由.NET AOT编译的动态库时会报错, 导致程序闪退   Regression?  _No response_   Known Workarounds  _No response_   Configuration  _No response_   Other information  _No response_
114189	area-System.Runtime.CompilerServices	[API Proposal]: change 'Unsafe.AsPointer' parameter to be 'ref readonly'	 Follow up from #85911   Background and motivation  This proposal is about also updating `Unsafe.AsPointer` to use `ref readonly`. This is the same change we did for the other APIs in #85911, and it is not breaking. We didn't include `AsPointer` at the time as we didn't have any use cases. This would now benefit us in CsWinRT (see #114024), as it would simplify all property accessors to get the CCW vtables for projected and custom mapped types.   API Proposal  ```diff namespace System.Runtime.CompilerServices {     public static class Unsafe     { -       public static void* AsPointer<T>(ref T value); +       public static void* AsPointer<T>(ref readonly T value);     } } ```   API Usage  ```csharp public static class SomeTypeImpl {     [FixedAddressValueType];     private static readonly SomeTypeVtbl Vftbl;      public static nint Vftbl => (nint)Unsafe.AsPointer(in Vftbl);      static SomeTypeImpl()     {         // Initialize vtable     } } ```   Risks  None. `Unsafe.AsPointer` is already an unsafe API, and it's in an unsafe namespace. This API makes things simpler, but developer could already achieve the same, just by adding an `Unsafe.AsRef` call on top of this chain. Just updating the signature for `AsPointer` simplifies all callsites instead.
114183	area-crossgen2-coreclr	When compiling with --opt-cross-module Crossgen2 can use invalid tokens	  When compiling with --opt-cross-module Crossgen2 can use invalid tokens from modules not within the version bubble of the compiled module. This is only seen during generation of generic dictionary lookups within generic methods.   Reproduction Steps  Run scenario privately distributed to the .NET Runtime team.   Expected behavior  No tokens from non-local modules can be used from within an R2R image which is not compiled with the --composite or --inputbubble options.   Actual behavior  Tokens from remote modules are used directly. When the dependency module is updated to a different version, these tokens are still used, which will cause the runtime to behave in unpredictable ways.   Regression?  No   Known Workarounds  Use the --opt-cross-module switch only to specify assemblies which are ALWAYS distributed together, and not updated separately. Do not use the --opt-cross-module:* feature.   Configuration  _No response_   Other information  _No response_
114182	area-GC-coreclr	Deadlock in loader lock (CoreCLR) from background GC in XAML apps	  We're hitting random hangs in the Microsoft Store in debug builds on CoreCLR.  Context from @hoyosjs: > "This is a loader lock deadlock > [...] > - Thread 3 tries to do a GC from the added pressure, which tries to start the background GC thread.  > - BG thread (and a ton of others) fail to start - they are stuck in LdrpInitializeThread on LdrpAcquireLoaderLock > - They can't start bc thread 16 has the lock (LdrShutdownThread) and it's doing TLS destruction. Part of it must happen in COOP GC.  Transitioning to coop means it waits for the original GC...   Crash dump (MSFT only): [loader_hang_dmp.zip](https://microsoft-my.sharepoint-df.com/:u:/p/sergiopedri/EQ2Xy0wTcblDnAj-o3QhrvQB4rq0lfqYMtev9Rk7lysFyQ?e=SB8EHP)   Reproduction Steps  It just happens when using the app for a while.   Configuration  - .NET 9.0.202
114179	area-System.Runtime.InteropServices	.NET and Native AOT improvements for CsWinRT 3.0	This epic tracks all work items across .NET 10 and Native AOT, related to supporting CsWinRT. We're currently working on a new version (see [CsWinRT/fhl/cswinrt-3.0](https://github.com/microsoft/CsWinRT/tree/fhl/cswinrt-3.0)) that will be built on top of .NET 10, and designed with trim/AOT as a first class citizen. We're also taking the opportunity to fix a number of known issues (both in terms of perf, binary size, memory use, and usability) that have accumulated in CsWinRT over time. Some of them would require new APIs or changes in .NET (and/or Native AOT), which are all linked here, so it's easier to see all of them at once. We're planning on adopting .NET 10 and CsWinRT 3.0 in the Microsoft Store, as well as in other inbox apps and Windows components.  > [!NOTE] > I'm listing both supporting work for CsWinRT 3.0, as well as general asks from the WinRT side in general (eg. PGO).   `ComWrappers` and COM generator APIs - [ ] https://github.com/dotnet/runtime/issues/110691 - [ ] https://github.com/dotnet/runtime/issues/113622 - [ ] https://github.com/dotnet/runtime/issues/114133 - [ ] https://github.com/dotnet/runtime/issues/109522 - [ ] https://github.com/dotnet/runtime/issues/114043   Native AOT - [ ] https://github.com/dotnet/runtime/issues/114024 - [ ] https://github.com/dotnet/runtime/issues/112927 - [ ] https://github.com/dotnet/runtime/issues/112029 - [ ] https://github.com/dotnet/runtime/issues/114093   Collections (nice to have) - [ ] https://github.com/dotnet/runtime/issues/31001 - [ ] https://github.com/dotnet/runtime/issues/18087   Misc (nice to have) - [ ] https://github.com/dotnet/runtime/issues/112969 - [ ] https://github.com/dotnet/runtime/issues/111925 - [ ] https://github.com/dotnet/runtime/issues/114189   Bugs (CoreCLR/AOT) - [ ] https://github.com/dotnet/runtime/issues/113949 - [ ] https://github.com/dotnet/runtime/issues/114182
114178	area-PAL-coreclr	Test failure: JIT/Regression/CLR-x86-JIT/dev10/b400791/_b400971b400971/_b400971b400971.cmd	Failed in [runtime-coreclr outerloop](https://dev.azure.com/dnceng-public/public/_build?definitionId=108&_a=summary)/[20250402.3](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002907) - Leg: coreclr linux x64 Checked @ (Alpine.321.Amd64.Open)azurelinux.3.amd64.open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.21-helix-amd64 - Test: Regression_1 Work Item  ``` 19:36:02.735 Running test: JIT/Regression/CLR-x86-JIT/dev10/b400791/_b400971b400971/_b400971b400971.cmd {0x2d-0x777a9508e130} ASSERT [THREAD ] at /__w/1/s/src/coreclr/pal/src/thread/thread.cpp.1475: Expression: setNameResult == 0 App Exit Code: 22 Expected: 100 Actual: 22 END EXECUTION - FAILED ``` 
114176	area-System.Net.Security	System.Net.Security.Unit.Tests timeout	 Build Information Build: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=1002768 Build error leg or test failing: System.Net.Requests.Tests.WorkItemExecution Pull request: https://github.com/dotnet/runtime/pull/114130 <!-- Error message template  -->  Error Message  Fill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).  <!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. -->  ```json {   "ErrorMessage": "['System.Net.Security.Unit.Tests' END OF WORK ITEM LOG: Command timed out, and was killed",   "ErrorPattern": "",   "BuildRetry": false,   "ExcludeConsoleLog": false } ```   <!-- Known issue validation start -->   Known issue validation **Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002768 **Error message validated:** `[['System.Net.Security.Unit.Tests' END OF WORK ITEM LOG: Command timed out, and was killed`] **Result validation:** :white_check_mark: Known issue matched with the provided build. **Validation performed at:** 4/2/2025 10:59:57 PM UTC <!-- Known issue validation end --> <!--Known issue error report start -->   Report  |Build|Definition|Test|Pull Request| |---|---|---|---| |[1005249](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005249)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005249&view=ms.vss-test-web.build-test-results-tab&runId=26832008&resultId=208476)|dotnet/runtime#114150| |[1005219](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005219)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005219&view=ms.vss-test-web.build-test-results-tab&runId=26831312&resultId=208476)|dotnet/runtime#114080| |[1005183](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005183)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005183&view=ms.vss-test-web.build-test-results-tab&runId=26830650&resultId=208960)|dotnet/runtime#114148| |[1005171](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005171)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005171&view=ms.vss-test-web.build-test-results-tab&runId=26829424&resultId=208475)|| |[1005174](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005174)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005174&view=ms.vss-test-web.build-test-results-tab&runId=26829396&resultId=208960)|dotnet/runtime#114257| |[1005163](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005163)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005163&view=ms.vss-test-web.build-test-results-tab&runId=26829152&resultId=208961)|dotnet/runtime#113924| |[1005153](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005153)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005153&view=ms.vss-test-web.build-test-results-tab&runId=26827204&resultId=208960)|dotnet/runtime#114249| |[1005140](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005140)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005140&view=ms.vss-test-web.build-test-results-tab&runId=26826688&resultId=208476)|dotnet/runtime#114228| |[1005089](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005089)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005089&view=ms.vss-test-web.build-test-results-tab&runId=26824906&resultId=208476)|dotnet/runtime#114080| |[1005040](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005040)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005040&view=ms.vss-test-web.build-test-results-tab&runId=26824106&resultId=208476)|dotnet/runtime#114137| |[1004925](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004925)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004925&view=ms.vss-test-web.build-test-results-tab&runId=26822978&resultId=208474)|dotnet/runtime#111408| |[1004699](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004699)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004699&view=ms.vss-test-web.build-test-results-tab&runId=26820668&resultId=208475)|dotnet/runtime#114227| |[1004916](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004916)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004916&view=ms.vss-test-web.build-test-results-tab&runId=26820228&resultId=208432)|dotnet/runtime#114249| |[1004888](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004888)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004888&view=ms.vss-test-web.build-test-results-tab&runId=26819380&resultId=208475)|dotnet/runtime#113976| |[1004767](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004767)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004767&view=ms.vss-test-web.build-test-results-tab&runId=26818508&resultId=208475)|dotnet/runtime#114048| |[1004820](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004820)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004820&view=ms.vss-test-web.build-test-results-tab&runId=26818160&resultId=210587)|dotnet/runtime#114245| |[1004806](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004806)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004806&view=ms.vss-test-web.build-test-results-tab&runId=26818094&resultId=208474)|dotnet/runtime#114244| |[1004800](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004800)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004800&view=ms.vss-test-web.build-test-results-tab&runId=26817628&resultId=185121)|dotnet/runtime#114180| |[1004763](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004763)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004763&view=ms.vss-test-web.build-test-results-tab&runId=26817460&resultId=208474)|dotnet/runtime#111408| |[2678845](https://dev.azure.com/dnceng/internal/_build/results?buildId=2678845)|dotnet-runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng//internal/_build/results?buildId=2678845&view=ms.vss-test-web.build-test-results-tab&runId=55085851&resultId=208475)|| |[1004726](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004726)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004726&view=ms.vss-test-web.build-test-results-tab&runId=26816880&resultId=208474)|dotnet/runtime#114157| |[1003296](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003296)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003296&view=ms.vss-test-web.build-test-results-tab&runId=26816774&resultId=208960)|dotnet/runtime#113286| |[1004711](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004711)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004711&view=ms.vss-test-web.build-test-results-tab&runId=26815586&resultId=208476)|dotnet/runtime#114240| |[1004708](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004708)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004708&view=ms.vss-test-web.build-test-results-tab&runId=26815490&resultId=208473)|dotnet/runtime#114234| |[1004695](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004695)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004695&view=ms.vss-test-web.build-test-results-tab&runId=26815282&resultId=208476)|dotnet/runtime#114187| |[1004454](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004454)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004454&view=ms.vss-test-web.build-test-results-tab&runId=26809610&resultId=208959)|dotnet/runtime#114233| |[1004391](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004391)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004391&view=ms.vss-test-web.build-test-results-tab&runId=26808464&resultId=208959)|dotnet/runtime#114227| |[1004397](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004397)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004397&view=ms.vss-test-web.build-test-results-tab&runId=26808094&resultId=208959)|dotnet/runtime#114228| |[1004313](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004313)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004313&view=ms.vss-test-web.build-test-results-tab&runId=26804938&resultId=208471)|dotnet/runtime#113313| |[1004288](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004288)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004288&view=ms.vss-test-web.build-test-results-tab&runId=26804196&resultId=208475)|dotnet/runtime#114173| |[1004267](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004267)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004267&view=ms.vss-test-web.build-test-results-tab&runId=26803744&resultId=208960)|dotnet/runtime#111072| |[1004249](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004249)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004249&view=ms.vss-test-web.build-test-results-tab&runId=26802928&resultId=208960)|| |[1004186](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004186)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004186&view=ms.vss-test-web.build-test-results-tab&runId=26801570&resultId=208474)|dotnet/runtime#114194| |[1004163](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004163)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004163&view=ms.vss-test-web.build-test-results-tab&runId=26800260&resultId=208960)|dotnet/runtime#114214| |[1004159](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004159)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004159&view=ms.vss-test-web.build-test-results-tab&runId=26800188&resultId=208474)|dotnet/runtime#114139| |[1004145](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004145)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004145&view=ms.vss-test-web.build-test-results-tab&runId=26799972&resultId=208961)|dotnet/runtime#114211| |[1004125](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004125)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004125&view=ms.vss-test-web.build-test-results-tab&runId=26799000&resultId=208475)|dotnet/runtime#114210| |[1004074](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004074)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004074&view=ms.vss-test-web.build-test-results-tab&runId=26798276&resultId=208474)|dotnet/runtime#114107| |[1004083](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004083)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004083&view=ms.vss-test-web.build-test-results-tab&runId=26798156&resultId=208961)|dotnet/runtime#114003| |[1004087](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004087)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004087&view=ms.vss-test-web.build-test-results-tab&runId=26798020&resultId=208475)|dotnet/runtime#114003| |[1003904](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003904)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003904&view=ms.vss-test-web.build-test-results-tab&runId=26796660&resultId=208505)|dotnet/runtime#100729| |[1003950](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003950)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003950&view=ms.vss-test-web.build-test-results-tab&runId=26794742&resultId=208474)|dotnet/runtime#114080| |[1003836](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003836)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003836&view=ms.vss-test-web.build-test-results-tab&runId=26794596&resultId=208475)|dotnet/runtime#114201| |[1003898](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003898)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003898&view=ms.vss-test-web.build-test-results-tab&runId=26793878&resultId=208960)|dotnet/runtime#114003| |[1003811](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003811)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003811&view=ms.vss-test-web.build-test-results-tab&runId=26791956&resultId=208475)|dotnet/runtime#114194| |[1003791](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003791)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003791&view=ms.vss-test-web.build-test-results-tab&runId=26791346&resultId=208475)|dotnet/runtime#113689| |[1003768](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003768)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003768&view=ms.vss-test-web.build-test-results-tab&runId=26791058&resultId=208960)|dotnet/runtime#113924| |[999726](https://dev.azure.com/dnceng-public/public/_build/results?buildId=999726)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=999726&view=ms.vss-test-web.build-test-results-tab&runId=26791046&resultId=208417)|dotnet/runtime#113876| |[1003757](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003757)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003757&view=ms.vss-test-web.build-test-results-tab&runId=26790612&resultId=208471)|dotnet/runtime#113313| |[1003735](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003735)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003735&view=ms.vss-test-web.build-test-results-tab&runId=26789722&resultId=208475)|| |[1003668](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003668)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003668&view=ms.vss-test-web.build-test-results-tab&runId=26786744&resultId=208475)|dotnet/runtime#114080| |[1002966](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002966)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002966&view=ms.vss-test-web.build-test-results-tab&runId=26785906&resultId=208475)|dotnet/runtime#114164| |[1003501](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003501)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003501&view=ms.vss-test-web.build-test-results-tab&runId=26779246&resultId=208960)|dotnet/runtime#113977| |[1003404](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003404)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003404&view=ms.vss-test-web.build-test-results-tab&runId=26779202&resultId=208960)|dotnet/runtime#114139| |[1003439](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003439)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003439&view=ms.vss-test-web.build-test-results-tab&runId=26777538&resultId=208475)|dotnet/runtime#114191| |[1003177](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003177)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003177&view=ms.vss-test-web.build-test-results-tab&runId=26777356&resultId=208475)|dotnet/runtime#114172| |[1003346](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003346)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003346&view=ms.vss-test-web.build-test-results-tab&runId=26774180&resultId=208960)|dotnet/runtime#114057| |[1003328](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003328)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003328&view=ms.vss-test-web.build-test-results-tab&runId=26774016&resultId=208475)|dotnet/runtime#114170| |[1003262](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003262)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003262&view=ms.vss-test-web.build-test-results-tab&runId=26771864&resultId=208475)|dotnet/runtime#114016| |[1003254](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003254)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003254&view=ms.vss-test-web.build-test-results-tab&runId=26771674&resultId=208475)|dotnet/runtime#114040| |[1003236](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003236)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003236&view=ms.vss-test-web.build-test-results-tab&runId=26770704&resultId=208475)|dotnet/runtime#113907| |[1003168](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003168)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003168&view=ms.vss-test-web.build-test-results-tab&runId=26769560&resultId=208475)|dotnet/runtime#101024| |[1003120](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003120)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003120&view=ms.vss-test-web.build-test-results-tab&runId=26768780&resultId=208475)|dotnet/runtime#114080| |[1003107](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003107)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003107&view=ms.vss-test-web.build-test-results-tab&runId=26764920&resultId=208475)|| |[1002768](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002768)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002768&view=ms.vss-test-web.build-test-results-tab&runId=26764000&resultId=208474)|dotnet/runtime#114130| |[1002980](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002980)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002980&view=ms.vss-test-web.build-test-results-tab&runId=26763794&resultId=208474)|dotnet/runtime#113313| |[1002946](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002946)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002946&view=ms.vss-test-web.build-test-results-tab&runId=26763672&resultId=208960)|dotnet/runtime#114136| |[1001192](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1001192)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1001192&view=ms.vss-test-web.build-test-results-tab&runId=26754970&resultId=208954)|dotnet/runtime#114111| |[1002592](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002592)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002592&view=ms.vss-test-web.build-test-results-tab&runId=26753738&resultId=208474)|dotnet/runtime#114146| |[1002293](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002293)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002293&view=ms.vss-test-web.build-test-results-tab&runId=26746932&resultId=208473)|dotnet/runtime#114142| |[1001546](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1001546)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1001546&view=ms.vss-test-web.build-test-results-tab&runId=26727832&resultId=208471)|dotnet/runtime#113849| |[997618](https://dev.azure.com/dnceng-public/public/_build/results?buildId=997618)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=997618&view=ms.vss-test-web.build-test-results-tab&runId=26695350&resultId=208412)|dotnet/runtime#114017| |[997360](https://dev.azure.com/dnceng-public/public/_build/results?buildId=997360)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=997360&view=ms.vss-test-web.build-test-results-tab&runId=26650734&resultId=208394)|dotnet/runtime#114012| |[991843](https://dev.azure.com/dnceng-public/public/_build/results?buildId=991843)|dotnet/runtime|[System.Net.Security.Unit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=991843&view=ms.vss-test-web.build-test-results-tab&runId=26480534&resultId=208422)|dotnet/runtime#112152| # Summary |24-Hour Hit Count|7-Day Hit Count|1-Month Count| |---|---|---| |41|73|74| <!--Known issue error report end -->
114168	area-System.ClientModel	[API Proposal]: System.ClientModel Add context to ModelReaderWriter to support AOT and collection scenarios	 Background and motivation The [System.ClientModel](https://www.nuget.org/packages/System.ClientModel) library provides building blocks for .NET clients that call cloud services. For background, this package has been reviewed in the following previous issues: [#94126](https://github.com/dotnet/runtime/issues/94126) | [#97711](https://github.com/dotnet/runtime/issues/97711) | [#104617](https://github.com/dotnet/runtime/issues/104617) | [#106197](https://github.com/dotnet/runtime/issues/106197) | [#111046](https://github.com/dotnet/runtime/issues/111046)  Current [ModelReaderWriter](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/System.ClientModel/samples/ModelReaderWriter.md) only supports `IPersistableModel<T>` and there is a need to be able to support collections of `IPersistableModel<T>` as well as change the existing functionality to be AOT compatible and not require reflection.  For more information on these changes you can [see this document](https://github.com/Azure/azure-sdk-for-net/blob/655ee3a0e011dff362af5164273a88bd1dd65df4/sdk/core/System.ClientModel/src/docs/ModelReaderWriterContext.md).    API Proposal   To do this we are introducing new overloads to Read and Write methods which take in a ModelReaderWriterContext.  ```diff public static class ModelReaderWriter {     public static T? Read<T>(BinaryData data, ModelReaderWriterOptions? options = null) where T : IPersistableModel<T>;  +  public static T? Read<T>(BinaryData data, ModelReaderWriterOptions options, ModelReaderWriterContext context);     public static object? Read(BinaryData data, Type returnType, ModelReaderWriterOptions? options = null);  +  public static object? Read(BinaryData data, Type returnType, ModelReaderWriterOptions options, ModelReaderWriterContext context);     public static BinaryData Write<T>(T model, ModelReaderWriterOptions? options = null) where T : IPersistableModel<T>;     public static BinaryData Write(object model, ModelReaderWriterOptions? options = null);  +  public static BinaryData Write<T>(T model, ModelReaderWriterOptions options, ModelReaderWriterContext context);  +  public static BinaryData Write(object model, ModelReaderWriterOptions options, ModelReaderWriterContext context);  }  ```  We are also introducing a ModelReaderWriterContext and ModelReaderWriterTypeBuilder which will be source generated to give ModelReaderWriter the info it needs to read and write without needing reflection.  ```diff +public abstract class ModelReaderWriterContext +{  +  protected ModelReaderWriterContext();  +  public ModelReaderWriterTypeBuilder GetTypeBuilder(Type type);  +  public bool TryGetTypeBuilder(Type type, out ModelReaderWriterTypeBuilder? builder);  +  protected virtual bool TryGetTypeBuilderCore(Type type, out ModelReaderWriterTypeBuilder? builder);  +}   +public abstract class ModelReaderWriterTypeBuilder +{  +  protected ModelReaderWriterTypeBuilder();  +  protected abstract Type BuilderType { get; } +  protected virtual Type? ItemType { get; } +  protected virtual void AddItem(object collection, object? item);  +  protected virtual void AddKeyValuePair(object collection, string key, object? item);  +  protected abstract object CreateInstance();  +  protected virtual IEnumerable? GetItems(object obj);  +  protected virtual object ToCollection(object builder);  +}  ```  In the event the SourceGenerator isn't automatically picking up types we are introducing a ModelReaderWriterBuildableAttribute which will allow customers to inject types to be discovered. ```diff +[AttributeUsage(AttributeTargets.Class, AllowMultiple = true)]  +public class ModelReaderWriterBuildableAttribute : Attribute +{  +  public ModelReaderWriterBuildableAttribute(Type type);  +}  ```  Finally we are introducing a ctor overload to JsonModelConverter which will allow System.Text.Json deal with `IJsonModel<T>` types in an AOT compatible way.  ```diff public class JsonModelConverter : JsonConverter<IJsonModel<object>> {     public JsonModelConverter();     public JsonModelConverter(ModelReaderWriterOptions options);  +  public JsonModelConverter(ModelReaderWriterOptions options, ModelReaderWriterContext context);     public override bool CanConvert(Type typeToConvert);     public override IJsonModel<object> Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options);     public override void Write(Utf8JsonWriter writer, IJsonModel<object> value, JsonSerializerOptions options);  }  ```   API Usage  For the simple case in order to use these new APIs you can simply call the new Read / Write overloads and pass in the Context that is generated for you.  ```csharp ModelReaderWriter.Write<MyPersistableModel>(myObject, ModelReaderWriterOptions.Json, MyProjectContext.Default); ```  For more advanced scenarios and details [see this document](https://github.com/Azure/azure-sdk-for-net/blob/655ee3a0e011dff362af5164273a88bd1dd65df4/sdk/core/System.ClientModel/src/docs/ModelReaderWriterContext.md).    Alternative Designs  _No response_   Risks  _No response_
114160	area-CodeGen-coreclr	JIT emits an array access bounds check during the value update via the for	  One of the familiar ways to update values in an array is to use a standard `for` loop. Currently, JIT generates an additional bounds check even for obvious variants (tests and details below).  ```csharp for (var index = 0; index < _testArray.Length; index++) {    _testArray[index] = arg; } ```  To avoid this, you can use this approach:  ```csharp foreach (ref var x in _testArray.AsSpan()) {    x = arg; } ```  In my tests, the performance difference is 3..5% for .NET 10, and 13..23% for .NET 9.   .NET 10 has a lot of improvements in the code generation, but maybe there is a way to make it almost equivalent `for` and `foreach ref`?  <details>   <summary>Benchmark code</summary>     ```csharp // To test .NET 10 Preview 2 used BenchmarkDotNet v0.14.1-nightly. // To test .NET 9 used BenchmarkDotNet v0.14.0  // dotnet run -c Release -f net9.0 --filter "*" --runtimes net10.0  using BenchmarkDotNet.Attributes; using BenchmarkDotNet.Running;  BenchmarkSwitcher.FromAssembly(typeof(ArrayBenchmarks).Assembly).Run(args);  [MinIterationCount(15)] [HideColumns("Job", "Error", "StdDev", "RatioSD", "arg")] [MeanColumn, MinColumn, MaxColumn, OperationsPerSecond] [JsonExporter] [DisassemblyDiagnoser] public class ArrayBenchmarks {     private int[] _testArray = null!;      [Params(10_000, 100_000, 1_000_000)]     public int Length { get; set; }      [GlobalSetup]     public void Setup()     {         _testArray = new int[Length];          var rnd = new Random(12345);          foreach (ref var x in _testArray.AsSpan())         {             x = rnd.Next();         }     }      [Benchmark(Baseline = true)]     [Arguments(42)]     public int For(int arg)     {         for (var index = 0; index < _testArray.Length; index++)         {             _testArray[index] = arg;         }          return _testArray.Length;     }      [Benchmark]     [Arguments(42)]     public int ForEachRef(int arg)     {         foreach (ref var x in _testArray.AsSpan())         {             x = arg;         }          return _testArray.Length;     } } ``` </details>   Configuration  .NET 10 benchmark:  ``` BenchmarkDotNet v0.14.1-nightly.20250107.205, Windows 10 (10.0.19045.5608/22H2/2022Update) 12th Gen Intel Core i9-12900K 3.19GHz, 1 CPU, 24 logical and 16 physical cores .NET SDK 10.0.100-preview.2.25164.34  ```  .NET 9 benchmark:  ``` BenchmarkDotNet v0.14.0, Windows 10 (10.0.19045.5608/22H2/2022Update) 12th Gen Intel Core i9-12900K, 1 CPU, 24 logical and 16 physical cores .NET SDK 10.0.100-preview.2.25164.34  ```    Regression?  No   Data  `.NET 10 Preview 2`  | Method     | Length  | Mean       | Min        | Max        | Op/s      | Ratio | Code Size | |----------- |-------- |-----------:|-----------:|-----------:|----------:|------:|----------:| | **For**        | **10000**   |   **2.001 μs** |   **1.937 μs** |   **2.059 μs** | **499,853.1** |  **1.00** |      **51 B** | | ForEachRef | 10000   |   1.930 μs |   1.904 μs |   1.972 μs | 518,158.8 |  0.97 |      59 B | |            |         |            |            |            |           |       |           | | **For**        | **100000**  |  **20.071 μs** |  **20.009 μs** |  **20.195 μs** |  **49,823.2** |  **1.00** |      **51 B** | | ForEachRef | 100000  |  19.016 μs |  18.991 μs |  19.073 μs |  52,586.4 |  0.95 |      59 B | |            |         |            |            |            |           |       |           | | **For**        | **1000000** | **200.654 μs** | **199.976 μs** | **202.221 μs** |   **4,983.7** |  **1.00** |      **51 B** | | ForEachRef | 1000000 | 192.151 μs | 189.928 μs | 196.704 μs |   5,204.2 |  0.96 |      59 B |  [ArrayBenchmarks-report-NET10.json](https://github.com/user-attachments/files/19572564/ArrayBenchmarks-report-NET10.json)  [ArrayBenchmarks-asm-NET10.md](https://github.com/user-attachments/files/19572600/ArrayBenchmarks-asm-NET10.md)  ---  `.NET 9`  | Method     | Length  | Mean       | Min        | Max        | Op/s      | Ratio | Code Size | |----------- |-------- |-----------:|-----------:|-----------:|----------:|------:|----------:| | **For**        | **10000**   |   **2.400 μs** |   **2.255 μs** |   **2.489 μs** | **416,702.5** |  **1.00** |      **51 B** | | ForEachRef | 10000   |   1.914 μs |   1.905 μs |   1.940 μs | 522,468.1 |  0.80 |      61 B | |            |         |            |            |            |           |       |           | | **For**        | **100000**  |  **25.069 μs** |  **24.286 μs** |  **26.037 μs** |  **39,890.6** |  **1.00** |      **51 B** | | ForEachRef | 100000  |  19.329 μs |  18.991 μs |  19.761 μs |  51,735.8 |  0.77 |      61 B | |            |         |            |            |            |           |       |           | | **For**        | **1000000** | **218.993 μs** | **211.513 μs** | **223.108 μs** |   **4,566.4** |  **1.00** |      **51 B** | | ForEachRef | 1000000 | 190.688 μs | 190.107 μs | 191.467 μs |   5,244.2 |  0.87 |      61 B |  [ArrayBenchmarks-report-NET9.json](https://github.com/user-attachments/files/19572702/ArrayBenchmarks-report-NET9.json)  [ArrayBenchmarks-asm-NET9.md](https://github.com/user-attachments/files/19572705/ArrayBenchmarks-asm-NET9.md)   Analysis  `for` codegen:  ```asm ; ArrayBenchmarks.For(Int32)        sub       rsp,28        xor       eax,eax        mov       rcx,[rcx+8]        cmp       dword ptr [rcx+8],0        jle       short M00_L01 M00_L00:        mov       r8,rcx        cmp       eax,[r8+8]        jae       short M00_L02        mov       [r8+rax*4+10],edx        inc       eax        cmp       [rcx+8],eax        jg        short M00_L00 M00_L01:        mov       eax,[rcx+8]        add       rsp,28        ret M00_L02:        call      CORINFO_HELP_RNGCHKFAIL        int       3 ```  ---  `foreach ref` codegen:  ```asm ; ArrayBenchmarks.ForEachRef(Int32)        mov       rax,[rcx+8]        test      rax,rax        je        short M00_L03        lea       r8,[rax+10]        mov       eax,[rax+8] M00_L00:        test      eax,eax        jle       short M00_L02        xor       r10d,r10d        nop       word ptr [rax+rax] M00_L01:        mov       [r8+r10],edx        add       r10,4        dec       eax        jne       short M00_L01 M00_L02:        mov       rax,[rcx+8]        mov       eax,[rax+8]        ret M00_L03:        xor       r8d,r8d        xor       eax,eax        jmp       short M00_L00 ; Total bytes of code 59 ``` 
114159	area-System.Globalization	TryParseExact not working as expected	  TryParseExact works not as expected in net8. The code works correctly in net4.7.2   Reproduction Steps  Sample code ```C# var foo = "Dez.20"; var culture = new CultureInfo("de-DE"); DateTime bar; var parsed = DateTime.TryParseExact(foo, "MMM.yy", culture, DateTimeStyles.None, out bar); Console.WriteLine("Parsed:" + parsed); ```   Expected behavior  The string gets parsed to DateTime 2020-12-01   Actual behavior  The string does not get parsed   Regression?  The code works in net4.7.2 and net4.8. It does no longer work in net6/8/9   Known Workarounds  _No response_   Configuration  Tested in net6/8/9 on Windows 10 x64   Other information  _No response_
114156	area-Host	[.NET 9] `RuntimeInformation.RuntimeIdentifier` includes unexpected OS details on Linux repo installs	  Per [docs](https://learn.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.runtimeinformation.runtimeidentifier?view=net-9.0#system-runtime-interopservices-runtimeinformation-runtimeidentifier) it is expected that `RuntimeInformation.RuntimeIdentifier` returns OS agnostic RID's.  In my testing the RID's returned on some Linux installs includes the OS name, this is not expected, and breaks usage of the reported RID. (I use the RID to [download](https://github.com/dotnet/diagnostics/blob/main/documentation/single-file-tools.md) single file dotnet tools)  Note that the issue may be related to how the SDK/runtime was built and installed, as the behavior on Windows (.NET sourced rom Msft, and Debian (.NET sourced from install script) appear to work, while the SDK/runtime installed using the OS native repository does not produce the correct results.  Summary:\ Win11 Msft download : Ok\ Debian `https://dot.net/v1/dotnet-install.sh` : Ok\ Ubuntu [dotnet-runtime-9.0](https://packages.ubuntu.com/oracular/dotnet-runtime-9.0) : Fail\ Alpine [dotnet9-runtime](https://pkgs.alpinelinux.org/package/v3.21/community/x86_64/dotnet9-runtime) : Fail   Reproduction Steps  Windows 11 x64, .NET 9 SDK installed: (Ok)\ `dotnet --info` -> `RID:         win-x64`\ `Console.WriteLine(RuntimeInformation.RuntimeIdentifier);` -> `win-x64`  Alpine, docker `alpine:latest`, `apk add dotnet9-runtime` (Fail)\ `dotnet --info` -> `RID:          alpine.3.21-x64` (expected `linux-musl-x64`)\ `Console.WriteLine(RuntimeInformation.RuntimeIdentifier);` -> `alpine.3.21-x64` (expected `linux-musl-x64`)  Debian, docker `debian:stable-slim`, `https://dot.net/v1/dotnet-install.sh` (Ok)\ `dotnet --info` -> `RID:          linux-x64`\ `Console.WriteLine(RuntimeInformation.RuntimeIdentifier);` -> `linux-x64`  Ubuntu, docker `ubuntu:rolling`, `dotnet-runtime-9.0` (Fail)\ `dotnet --info` -> `RID:          ubuntu.24.10-x64` (expected `linux-x64`)\ `Console.WriteLine(RuntimeInformation.RuntimeIdentifier);` -> `ubuntu.24.10-x64` (expected `linux-x64`)     Expected behavior  RID returned in `dotnet --info` and `RuntimeInformation.RuntimeIdentifier` is consistent with documentation.   Actual behavior  See reproduction steps, it appears that .NET installed via Linux native repos do not return the correct RID.   Regression?  I last tested this behavior in .NET v7 and it worked then, but that was a long time ago.   Known Workarounds  Always install using Msft helper script, but that is not recommended for production use.   Configuration  .NET 9.0.3  See description for install steps on Docker.   Other information  _No response_
114153	area-System.Net	System.Net.WebSockets.Client.Tests timeout	 Build Information Build: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=1002293 Build error leg or test failing: System.Net.WebSockets.Client.Tests.WorkItemExecution Pull request: https://github.com/dotnet/runtime/pull/114142 <!-- Error message template  -->  Error Message  Fill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).  <!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. -->  ```json {   "ErrorMessage": ["[Long Running Test] 'System.Net.WebSockets.Client.Tests", "'System.Net.WebSockets.Client.Tests' END OF WORK ITEM LOG: Command timed out"],   "ErrorPattern": "",   "BuildRetry": false,   "ExcludeConsoleLog": false } ```     <!-- Known issue validation start -->   Known issue validation **Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002293 **Error message validated:** `[[Long Running Test] 'System.Net.WebSockets.Client.Tests 'System.Net.WebSockets.Client.Tests' END OF WORK ITEM LOG: Command timed out]`] **Result validation:** :x: Known issue did not match with the provided build. **Validation performed at:** 4/2/2025 1:47:29 PM UTC <!-- Known issue validation end --> <!-- Known issue validation start -->   Known issue validation **Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002293 **Error message validated:** `[[Long Running Test] 'System.Net.WebSockets.Client.Tests 'System.Net.WebSockets.Client.Tests' END OF WORK ITEM LOG: Command timed out`] **Result validation:** :white_check_mark: Known issue matched with the provided build. **Validation performed at:** 4/2/2025 1:48:35 PM UTC <!-- Known issue validation end --> <!--Known issue error report start -->   Report  |Build|Definition|Test|Pull Request| |---|---|---|---| |[1005249](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005249)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005249&view=ms.vss-test-web.build-test-results-tab&runId=26832008&resultId=208477)|dotnet/runtime#114150| |[1005219](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005219)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005219&view=ms.vss-test-web.build-test-results-tab&runId=26831312&resultId=208477)|dotnet/runtime#114080| |[1005183](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005183)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005183&view=ms.vss-test-web.build-test-results-tab&runId=26830650&resultId=208962)|dotnet/runtime#114148| |[1005171](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005171)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005171&view=ms.vss-test-web.build-test-results-tab&runId=26829424&resultId=208476)|| |[1005174](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005174)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005174&view=ms.vss-test-web.build-test-results-tab&runId=26829396&resultId=208962)|dotnet/runtime#114257| |[1005163](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005163)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005163&view=ms.vss-test-web.build-test-results-tab&runId=26829152&resultId=208962)|dotnet/runtime#113924| |[1005153](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005153)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005153&view=ms.vss-test-web.build-test-results-tab&runId=26827204&resultId=208961)|dotnet/runtime#114249| |[1005140](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005140)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005140&view=ms.vss-test-web.build-test-results-tab&runId=26826688&resultId=208477)|dotnet/runtime#114228| |[1005089](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005089)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005089&view=ms.vss-test-web.build-test-results-tab&runId=26824906&resultId=208477)|dotnet/runtime#114080| |[1005040](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005040)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005040&view=ms.vss-test-web.build-test-results-tab&runId=26824106&resultId=208477)|dotnet/runtime#114137| |[1004925](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004925)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004925&view=ms.vss-test-web.build-test-results-tab&runId=26822978&resultId=208476)|dotnet/runtime#111408| |[1004699](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004699)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004699&view=ms.vss-test-web.build-test-results-tab&runId=26820668&resultId=208476)|dotnet/runtime#114227| |[1004916](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004916)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004916&view=ms.vss-test-web.build-test-results-tab&runId=26820228&resultId=208433)|dotnet/runtime#114249| |[1004888](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004888)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004888&view=ms.vss-test-web.build-test-results-tab&runId=26819380&resultId=208476)|dotnet/runtime#113976| |[1004767](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004767)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004767&view=ms.vss-test-web.build-test-results-tab&runId=26818508&resultId=208476)|dotnet/runtime#114048| |[1004820](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004820)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004820&view=ms.vss-test-web.build-test-results-tab&runId=26818160&resultId=210588)|dotnet/runtime#114245| |[1004806](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004806)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004806&view=ms.vss-test-web.build-test-results-tab&runId=26818094&resultId=208475)|dotnet/runtime#114244| |[1004763](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004763)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004763&view=ms.vss-test-web.build-test-results-tab&runId=26817460&resultId=208476)|dotnet/runtime#111408| |[2678845](https://dev.azure.com/dnceng/internal/_build/results?buildId=2678845)|dotnet-runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng//internal/_build/results?buildId=2678845&view=ms.vss-test-web.build-test-results-tab&runId=55085851&resultId=208476)|| |[1004726](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004726)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004726&view=ms.vss-test-web.build-test-results-tab&runId=26816880&resultId=208476)|dotnet/runtime#114157| |[1003296](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003296)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003296&view=ms.vss-test-web.build-test-results-tab&runId=26816774&resultId=208961)|dotnet/runtime#113286| |[1004711](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004711)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004711&view=ms.vss-test-web.build-test-results-tab&runId=26815586&resultId=208475)|dotnet/runtime#114240| |[1004708](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004708)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004708&view=ms.vss-test-web.build-test-results-tab&runId=26815490&resultId=208476)|dotnet/runtime#114234| |[1004695](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004695)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004695&view=ms.vss-test-web.build-test-results-tab&runId=26815282&resultId=208475)|dotnet/runtime#114187| |[1004454](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004454)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004454&view=ms.vss-test-web.build-test-results-tab&runId=26809610&resultId=208961)|dotnet/runtime#114233| |[1004391](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004391)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004391&view=ms.vss-test-web.build-test-results-tab&runId=26808464&resultId=208957)|dotnet/runtime#114227| |[1004397](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004397)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004397&view=ms.vss-test-web.build-test-results-tab&runId=26808094&resultId=208957)|dotnet/runtime#114228| |[1004313](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004313)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004313&view=ms.vss-test-web.build-test-results-tab&runId=26804938&resultId=208472)|dotnet/runtime#113313| |[1004288](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004288)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004288&view=ms.vss-test-web.build-test-results-tab&runId=26804196&resultId=208476)|dotnet/runtime#114173| |[1004267](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004267)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004267&view=ms.vss-test-web.build-test-results-tab&runId=26803744&resultId=208961)|dotnet/runtime#111072| |[1004249](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004249)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004249&view=ms.vss-test-web.build-test-results-tab&runId=26802928&resultId=208961)|| |[1004186](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004186)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004186&view=ms.vss-test-web.build-test-results-tab&runId=26801570&resultId=208476)|dotnet/runtime#114194| |[1004163](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004163)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004163&view=ms.vss-test-web.build-test-results-tab&runId=26800260&resultId=208961)|dotnet/runtime#114214| |[1004159](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004159)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004159&view=ms.vss-test-web.build-test-results-tab&runId=26800188&resultId=208475)|dotnet/runtime#114139| |[1004145](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004145)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004145&view=ms.vss-test-web.build-test-results-tab&runId=26799972&resultId=208960)|dotnet/runtime#114211| |[1004125](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004125)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004125&view=ms.vss-test-web.build-test-results-tab&runId=26799000&resultId=208476)|dotnet/runtime#114210| |[1004074](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004074)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004074&view=ms.vss-test-web.build-test-results-tab&runId=26798276&resultId=208476)|dotnet/runtime#114107| |[1004083](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004083)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004083&view=ms.vss-test-web.build-test-results-tab&runId=26798156&resultId=208960)|dotnet/runtime#114003| |[1004087](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004087)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004087&view=ms.vss-test-web.build-test-results-tab&runId=26798020&resultId=208476)|dotnet/runtime#114003| |[1003904](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003904)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003904&view=ms.vss-test-web.build-test-results-tab&runId=26796660&resultId=208506)|dotnet/runtime#100729| |[1003950](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003950)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003950&view=ms.vss-test-web.build-test-results-tab&runId=26794742&resultId=208476)|dotnet/runtime#114080| |[1003836](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003836)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003836&view=ms.vss-test-web.build-test-results-tab&runId=26794596&resultId=208476)|dotnet/runtime#114201| |[1003898](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003898)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003898&view=ms.vss-test-web.build-test-results-tab&runId=26793878&resultId=208961)|dotnet/runtime#114003| |[1003797](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003797)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003797&view=ms.vss-test-web.build-test-results-tab&runId=26791542&resultId=208474)|dotnet/runtime#114145| |[1003811](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003811)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003811&view=ms.vss-test-web.build-test-results-tab&runId=26791956&resultId=208476)|dotnet/runtime#114194| |[1003791](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003791)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003791&view=ms.vss-test-web.build-test-results-tab&runId=26791346&resultId=208476)|dotnet/runtime#113689| |[1003768](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003768)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003768&view=ms.vss-test-web.build-test-results-tab&runId=26791058&resultId=208961)|dotnet/runtime#113924| |[999726](https://dev.azure.com/dnceng-public/public/_build/results?buildId=999726)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=999726&view=ms.vss-test-web.build-test-results-tab&runId=26791046&resultId=208418)|dotnet/runtime#113876| |[1003757](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003757)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003757&view=ms.vss-test-web.build-test-results-tab&runId=26790612&resultId=208472)|dotnet/runtime#113313| |[1003735](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003735)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003735&view=ms.vss-test-web.build-test-results-tab&runId=26789722&resultId=208476)|| |[1003668](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003668)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003668&view=ms.vss-test-web.build-test-results-tab&runId=26786744&resultId=208476)|dotnet/runtime#114080| |[1002966](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002966)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002966&view=ms.vss-test-web.build-test-results-tab&runId=26785906&resultId=208476)|dotnet/runtime#114164| |[1003501](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003501)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003501&view=ms.vss-test-web.build-test-results-tab&runId=26779246&resultId=208961)|dotnet/runtime#113977| |[1003404](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003404)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003404&view=ms.vss-test-web.build-test-results-tab&runId=26779202&resultId=208961)|dotnet/runtime#114139| |[1003439](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003439)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003439&view=ms.vss-test-web.build-test-results-tab&runId=26777538&resultId=208476)|dotnet/runtime#114191| |[1003177](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003177)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003177&view=ms.vss-test-web.build-test-results-tab&runId=26777356&resultId=208476)|dotnet/runtime#114172| |[1003346](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003346)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003346&view=ms.vss-test-web.build-test-results-tab&runId=26774180&resultId=208961)|dotnet/runtime#114057| |[1003328](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003328)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003328&view=ms.vss-test-web.build-test-results-tab&runId=26774016&resultId=208476)|dotnet/runtime#114170| |[1003262](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003262)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003262&view=ms.vss-test-web.build-test-results-tab&runId=26771864&resultId=208476)|dotnet/runtime#114016| |[1003254](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003254)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003254&view=ms.vss-test-web.build-test-results-tab&runId=26771674&resultId=208476)|dotnet/runtime#114040| |[1003236](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003236)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003236&view=ms.vss-test-web.build-test-results-tab&runId=26770704&resultId=208476)|dotnet/runtime#113907| |[1003168](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003168)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003168&view=ms.vss-test-web.build-test-results-tab&runId=26769560&resultId=208476)|dotnet/runtime#101024| |[1003120](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003120)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003120&view=ms.vss-test-web.build-test-results-tab&runId=26768780&resultId=208476)|dotnet/runtime#114080| |[1003107](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003107)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003107&view=ms.vss-test-web.build-test-results-tab&runId=26764920&resultId=208476)|| |[1002768](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002768)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002768&view=ms.vss-test-web.build-test-results-tab&runId=26764000&resultId=208475)|dotnet/runtime#114130| |[1002980](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002980)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002980&view=ms.vss-test-web.build-test-results-tab&runId=26763794&resultId=208475)|dotnet/runtime#113313| |[1002946](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002946)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002946&view=ms.vss-test-web.build-test-results-tab&runId=26763672&resultId=208961)|dotnet/runtime#114136| |[1002464](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002464)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002464&view=ms.vss-test-web.build-test-results-tab&runId=26761534&resultId=208474)|dotnet/runtime#114145| |[1002831](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002831)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002831&view=ms.vss-test-web.build-test-results-tab&runId=26761528&resultId=208961)|dotnet/runtime#110818| |[1002643](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002643)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002643&view=ms.vss-test-web.build-test-results-tab&runId=26760632&resultId=208475)|dotnet/runtime#113765| |[1002772](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002772)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002772&view=ms.vss-test-web.build-test-results-tab&runId=26759590&resultId=208475)|dotnet/runtime#114085| |[1002251](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002251)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002251&view=ms.vss-test-web.build-test-results-tab&runId=26756982&resultId=208959)|dotnet/runtime#114040| |[1002664](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002664)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002664&view=ms.vss-test-web.build-test-results-tab&runId=26756214&resultId=208475)|dotnet/runtime#114046| |[1002688](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002688)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002688&view=ms.vss-test-web.build-test-results-tab&runId=26756930&resultId=208169)|dotnet/runtime#114158| |[1002647](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002647)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002647&view=ms.vss-test-web.build-test-results-tab&runId=26755836&resultId=208475)|dotnet/runtime#114157| |[1002636](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002636)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002636&view=ms.vss-test-web.build-test-results-tab&runId=26755556&resultId=208475)|dotnet/runtime#113576| |[1001192](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1001192)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1001192&view=ms.vss-test-web.build-test-results-tab&runId=26754970&resultId=208955)|dotnet/runtime#114111| |[1002606](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002606)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002606&view=ms.vss-test-web.build-test-results-tab&runId=26754544&resultId=208475)|dotnet/runtime#114150| |[1002599](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002599)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002599&view=ms.vss-test-web.build-test-results-tab&runId=26754220&resultId=208960)|dotnet/runtime#113924| |[1002592](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002592)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002592&view=ms.vss-test-web.build-test-results-tab&runId=26753738&resultId=208475)|dotnet/runtime#114146| |[1002545](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002545)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002545&view=ms.vss-test-web.build-test-results-tab&runId=26752276&resultId=208475)|dotnet/runtime#113689| |[1002524](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002524)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002524&view=ms.vss-test-web.build-test-results-tab&runId=26751834&resultId=208960)|dotnet/runtime#114003| |[1002521](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002521)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002521&view=ms.vss-test-web.build-test-results-tab&runId=26751674&resultId=208475)|dotnet/runtime#114003| |[1002454](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002454)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002454&view=ms.vss-test-web.build-test-results-tab&runId=26750468&resultId=208474)|dotnet/runtime#114149| |[1002450](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002450)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002450&view=ms.vss-test-web.build-test-results-tab&runId=26750418&resultId=208474)|dotnet/runtime#114148| |[1002364](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002364)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002364&view=ms.vss-test-web.build-test-results-tab&runId=26750262&resultId=208474)|dotnet/runtime#114049| |[1002293](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002293)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002293&view=ms.vss-test-web.build-test-results-tab&runId=26746932&resultId=208474)|dotnet/runtime#114142| |[1001546](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1001546)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1001546&view=ms.vss-test-web.build-test-results-tab&runId=26727832&resultId=208472)|dotnet/runtime#113849| |[997618](https://dev.azure.com/dnceng-public/public/_build/results?buildId=997618)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=997618&view=ms.vss-test-web.build-test-results-tab&runId=26695350&resultId=208413)|dotnet/runtime#114017| |[997360](https://dev.azure.com/dnceng-public/public/_build/results?buildId=997360)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=997360&view=ms.vss-test-web.build-test-results-tab&runId=26650734&resultId=208396)|dotnet/runtime#114012| |[991843](https://dev.azure.com/dnceng-public/public/_build/results?buildId=991843)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=991843&view=ms.vss-test-web.build-test-results-tab&runId=26480534&resultId=208423)|dotnet/runtime#112152| # Summary |24-Hour Hit Count|7-Day Hit Count|1-Month Count| |---|---|---| |40|90|91| <!--Known issue error report end -->
114152	area-System.Net.Security	System.Net.Security.Tests timeout	 Build Information Build: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=1002293 Build error leg or test failing: System.Net.Security.Tests.WorkItemExecution Pull request: https://github.com/dotnet/runtime/pull/114142 <!-- Error message template  -->  Error Message  Fill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).  <!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. -->  ```json {   "ErrorMessage": ["[Long Running Test] 'System.Net.Security.Tests.", "'System.Net.Security.Tests' END OF WORK ITEM LOG: Command timed out"],   "ErrorPattern": "",   "BuildRetry": false,   "ExcludeConsoleLog": false } ``` <!-- Known issue validation start -->   Known issue validation **Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002293 **Error message validated:** `[[Long Running Test] 'System.Net.Security.Tests.ServerNoEncryptionTest 'System.Net.Security.Tests' END OF WORK ITEM LOG: Command timed out`] **Result validation:** :white_check_mark: Known issue matched with the provided build. **Validation performed at:** 4/2/2025 1:44:08 PM UTC <!-- Known issue validation end --> <!--Known issue error report start -->   Report  |Build|Definition|Test|Pull Request| |---|---|---|---| |[1003439](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003439)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003439&view=ms.vss-test-web.build-test-results-tab&runId=26777538&resultId=208474)|dotnet/runtime#114191| |[1003236](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003236)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003236&view=ms.vss-test-web.build-test-results-tab&runId=26770704&resultId=208474)|dotnet/runtime#113907| |[1002768](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002768)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002768&view=ms.vss-test-web.build-test-results-tab&runId=26764000&resultId=208473)|dotnet/runtime#114130| |[1002293](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002293)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002293&view=ms.vss-test-web.build-test-results-tab&runId=26746932&resultId=208472)|dotnet/runtime#114142| # Summary |24-Hour Hit Count|7-Day Hit Count|1-Month Count| |---|---|---| |4|4|4| <!--Known issue error report end --> <!-- Known issue validation start -->   Known issue validation **Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002293 **Error message validated:** `[[Long Running Test] 'System.Net.Security.Tests. 'System.Net.Security.Tests' END OF WORK ITEM LOG: Command timed out`] **Result validation:** :white_check_mark: Known issue matched with the provided build. **Validation performed at:** 4/3/2025 5:43:13 AM UTC <!-- Known issue validation end --> <!--Known issue error report start -->   Report  |Build|Definition|Test|Pull Request| |---|---|---|---| |[1003439](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003439)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003439&view=ms.vss-test-web.build-test-results-tab&runId=26777538&resultId=208474)|dotnet/runtime#114191| |[1003236](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003236)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003236&view=ms.vss-test-web.build-test-results-tab&runId=26770704&resultId=208474)|dotnet/runtime#113907| |[1002768](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002768)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002768&view=ms.vss-test-web.build-test-results-tab&runId=26764000&resultId=208473)|dotnet/runtime#114130| |[1002293](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002293)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002293&view=ms.vss-test-web.build-test-results-tab&runId=26746932&resultId=208472)|dotnet/runtime#114142| # Summary |24-Hour Hit Count|7-Day Hit Count|1-Month Count| |---|---|---| |4|4|4| <!--Known issue error report end --> <!--Known issue error report start -->   Report  |Build|Definition|Test|Pull Request| |---|---|---|---| |[1005249](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005249)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005249&view=ms.vss-test-web.build-test-results-tab&runId=26832008&resultId=208475)|dotnet/runtime#114150| |[1005219](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005219)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005219&view=ms.vss-test-web.build-test-results-tab&runId=26831312&resultId=208475)|dotnet/runtime#114080| |[1005183](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005183)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005183&view=ms.vss-test-web.build-test-results-tab&runId=26830650&resultId=208961)|dotnet/runtime#114148| |[1005171](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005171)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005171&view=ms.vss-test-web.build-test-results-tab&runId=26829424&resultId=208477)|| |[1005174](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005174)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005174&view=ms.vss-test-web.build-test-results-tab&runId=26829396&resultId=208961)|dotnet/runtime#114257| |[1005163](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005163)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005163&view=ms.vss-test-web.build-test-results-tab&runId=26829152&resultId=208960)|dotnet/runtime#113924| |[1005153](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005153)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005153&view=ms.vss-test-web.build-test-results-tab&runId=26827204&resultId=208959)|dotnet/runtime#114249| |[1005140](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005140)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005140&view=ms.vss-test-web.build-test-results-tab&runId=26826688&resultId=208475)|dotnet/runtime#114228| |[1005089](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005089)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005089&view=ms.vss-test-web.build-test-results-tab&runId=26824906&resultId=208475)|dotnet/runtime#114080| |[1005040](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005040)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005040&view=ms.vss-test-web.build-test-results-tab&runId=26824106&resultId=208475)|dotnet/runtime#114137| |[1004925](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004925)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004925&view=ms.vss-test-web.build-test-results-tab&runId=26822978&resultId=208475)|dotnet/runtime#111408| |[1004699](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004699)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004699&view=ms.vss-test-web.build-test-results-tab&runId=26820668&resultId=208474)|dotnet/runtime#114227| |[1004916](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004916)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004916&view=ms.vss-test-web.build-test-results-tab&runId=26820228&resultId=208431)|dotnet/runtime#114249| |[1004888](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004888)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004888&view=ms.vss-test-web.build-test-results-tab&runId=26819380&resultId=208474)|dotnet/runtime#113976| |[1004767](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004767)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004767&view=ms.vss-test-web.build-test-results-tab&runId=26818508&resultId=208474)|dotnet/runtime#114048| |[1004820](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004820)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004820&view=ms.vss-test-web.build-test-results-tab&runId=26818160&resultId=210586)|dotnet/runtime#114245| |[1004806](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004806)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004806&view=ms.vss-test-web.build-test-results-tab&runId=26818094&resultId=208473)|dotnet/runtime#114244| |[1004763](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004763)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004763&view=ms.vss-test-web.build-test-results-tab&runId=26817460&resultId=208473)|dotnet/runtime#111408| |[2678845](https://dev.azure.com/dnceng/internal/_build/results?buildId=2678845)|dotnet-runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng//internal/_build/results?buildId=2678845&view=ms.vss-test-web.build-test-results-tab&runId=55085851&resultId=208474)|| |[1004726](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004726)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004726&view=ms.vss-test-web.build-test-results-tab&runId=26816880&resultId=208475)|dotnet/runtime#114157| |[1003296](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003296)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003296&view=ms.vss-test-web.build-test-results-tab&runId=26816774&resultId=208959)|dotnet/runtime#113286| |[1004711](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004711)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004711&view=ms.vss-test-web.build-test-results-tab&runId=26815586&resultId=208472)|dotnet/runtime#114240| |[1004708](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004708)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004708&view=ms.vss-test-web.build-test-results-tab&runId=26815490&resultId=208475)|dotnet/runtime#114234| |[1004695](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004695)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004695&view=ms.vss-test-web.build-test-results-tab&runId=26815282&resultId=208477)|dotnet/runtime#114187| |[1004454](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004454)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004454&view=ms.vss-test-web.build-test-results-tab&runId=26809610&resultId=208960)|dotnet/runtime#114233| |[1004391](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004391)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004391&view=ms.vss-test-web.build-test-results-tab&runId=26808464&resultId=208958)|dotnet/runtime#114227| |[1004397](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004397)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004397&view=ms.vss-test-web.build-test-results-tab&runId=26808094&resultId=208958)|dotnet/runtime#114228| |[1004313](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004313)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004313&view=ms.vss-test-web.build-test-results-tab&runId=26804938&resultId=208470)|dotnet/runtime#113313| |[1004288](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004288)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004288&view=ms.vss-test-web.build-test-results-tab&runId=26804196&resultId=208474)|dotnet/runtime#114173| |[1004267](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004267)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004267&view=ms.vss-test-web.build-test-results-tab&runId=26803744&resultId=208959)|dotnet/runtime#111072| |[1004249](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004249)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004249&view=ms.vss-test-web.build-test-results-tab&runId=26802928&resultId=208959)|| |[1004186](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004186)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004186&view=ms.vss-test-web.build-test-results-tab&runId=26801570&resultId=208475)|dotnet/runtime#114194| |[1004163](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004163)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004163&view=ms.vss-test-web.build-test-results-tab&runId=26800260&resultId=208959)|dotnet/runtime#114214| |[1004159](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004159)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004159&view=ms.vss-test-web.build-test-results-tab&runId=26800188&resultId=208473)|dotnet/runtime#114139| |[1004145](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004145)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004145&view=ms.vss-test-web.build-test-results-tab&runId=26799972&resultId=208959)|dotnet/runtime#114211| |[1004125](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004125)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004125&view=ms.vss-test-web.build-test-results-tab&runId=26799000&resultId=208474)|dotnet/runtime#114210| |[1004074](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004074)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004074&view=ms.vss-test-web.build-test-results-tab&runId=26798276&resultId=208475)|dotnet/runtime#114107| |[1004083](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004083)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004083&view=ms.vss-test-web.build-test-results-tab&runId=26798156&resultId=208959)|dotnet/runtime#114003| |[1004087](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004087)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004087&view=ms.vss-test-web.build-test-results-tab&runId=26798020&resultId=208474)|dotnet/runtime#114003| |[1003904](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003904)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003904&view=ms.vss-test-web.build-test-results-tab&runId=26796660&resultId=208504)|dotnet/runtime#100729| |[1003950](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003950)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003950&view=ms.vss-test-web.build-test-results-tab&runId=26794742&resultId=208475)|dotnet/runtime#114080| |[1003836](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003836)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003836&view=ms.vss-test-web.build-test-results-tab&runId=26794596&resultId=208474)|dotnet/runtime#114201| |[1003898](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003898)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003898&view=ms.vss-test-web.build-test-results-tab&runId=26793878&resultId=208959)|dotnet/runtime#114003| |[1003797](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003797)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003797&view=ms.vss-test-web.build-test-results-tab&runId=26791542&resultId=208475)|dotnet/runtime#114145| |[1003811](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003811)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003811&view=ms.vss-test-web.build-test-results-tab&runId=26791956&resultId=208474)|dotnet/runtime#114194| |[1003791](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003791)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003791&view=ms.vss-test-web.build-test-results-tab&runId=26791346&resultId=208474)|dotnet/runtime#113689| |[1003768](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003768)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003768&view=ms.vss-test-web.build-test-results-tab&runId=26791058&resultId=208959)|dotnet/runtime#113924| |[999726](https://dev.azure.com/dnceng-public/public/_build/results?buildId=999726)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=999726&view=ms.vss-test-web.build-test-results-tab&runId=26791046&resultId=208416)|dotnet/runtime#113876| |[1003757](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003757)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003757&view=ms.vss-test-web.build-test-results-tab&runId=26790612&resultId=208470)|dotnet/runtime#113313| |[1003735](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003735)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003735&view=ms.vss-test-web.build-test-results-tab&runId=26789722&resultId=208474)|| |[1003668](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003668)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003668&view=ms.vss-test-web.build-test-results-tab&runId=26786744&resultId=208474)|dotnet/runtime#114080| |[1002966](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002966)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002966&view=ms.vss-test-web.build-test-results-tab&runId=26785906&resultId=208474)|dotnet/runtime#114164| |[1003501](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003501)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003501&view=ms.vss-test-web.build-test-results-tab&runId=26779246&resultId=208959)|dotnet/runtime#113977| |[1003439](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003439)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003439&view=ms.vss-test-web.build-test-results-tab&runId=26777538&resultId=208474)|dotnet/runtime#114191| |[1003236](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003236)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003236&view=ms.vss-test-web.build-test-results-tab&runId=26770704&resultId=208474)|dotnet/runtime#113907| |[1002768](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002768)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002768&view=ms.vss-test-web.build-test-results-tab&runId=26764000&resultId=208473)|dotnet/runtime#114130| |[1001192](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1001192)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1001192&view=ms.vss-test-web.build-test-results-tab&runId=26754970&resultId=208953)|dotnet/runtime#114111| |[1002592](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002592)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002592&view=ms.vss-test-web.build-test-results-tab&runId=26753738&resultId=208473)|dotnet/runtime#114146| |[1002293](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002293)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002293&view=ms.vss-test-web.build-test-results-tab&runId=26746932&resultId=208472)|dotnet/runtime#114142| |[997618](https://dev.azure.com/dnceng-public/public/_build/results?buildId=997618)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=997618&view=ms.vss-test-web.build-test-results-tab&runId=26695350&resultId=208411)|dotnet/runtime#114017| |[997360](https://dev.azure.com/dnceng-public/public/_build/results?buildId=997360)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=997360&view=ms.vss-test-web.build-test-results-tab&runId=26650734&resultId=208397)|dotnet/runtime#114012| |[991843](https://dev.azure.com/dnceng-public/public/_build/results?buildId=991843)|dotnet/runtime|[System.Net.Security.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=991843&view=ms.vss-test-web.build-test-results-tab&runId=26480534&resultId=208421)|dotnet/runtime#112152| # Summary |24-Hour Hit Count|7-Day Hit Count|1-Month Count| |---|---|---| |40|61|62| <!--Known issue error report end -->
114151	area-System.Threading	[API Proposal]: Add PartitionedRateLimiter.TryReplenish	 Background and motivation  System.Threading.RateLimiting has an option called AutoReplenish. When enabled, every rate limiter has a Timer that "replenishes" its availability based on various parameters. It is possible to disable AutoReplenish, at which point applications are expected to periodically manually call ReplenishingRateLimiter.TryReplenish. So far so good. However, if we wrap a ReplenishingRateLimiter in a PartitionedRateLimiter, this is no longer possible. PartitionedRateLimiter will automatically create its own (single) Timer, that automatically replenishes any materialized ReplenishingRateLimiters. (materialization happens per partition key on demand)  This leaves us unable to manually call TryReplenish.   My current workaround is to call DefaultPartitionedRateLimiter.Heartbeat manually (this is called from the Timer)  ```csharp var heartBeatTask =   (Task)myRateLimiter       .GetType()       .GetMethod("Heartbeat", BindingFlags.NonPublic | BindingFlags.Instance)!       .Invoke(innerRateLimiter, null)!; await heartBeatTask; ```     API Proposal  ```csharp namespace System.Threading.RateLimiting;  public abstract class PartitionedRateLimiter<TResource> : IAsyncDisposable, IDisposable {     /// <summary>Attempts to replenish tokens for all materialized replenishing rate limiters.</summary>     /// <returns>     /// Generally returns <see langword="false" /> if <see cref="P:System.Threading.RateLimiting.ReplenishingRateLimiter.IsAutoReplenishing" /> is enabled     /// or if no tokens were replenished. Otherwise <see langword="true" />.     /// </returns>     public abstract bool TryReplenish(); } ```    API Usage  ```csharp var ipAddressLimiter = PartitionedRateLimiter.Create<HttpContext, IPAddress>(     context =>     {         var remoteIpAddress = context.HttpContext.Connection.RemoteIpAddress;         return RateLimitPartition.GetSlidingWindowLimiter(             remoteIpAddress,             _ => new SlidingWindowRateLimiterOptions             {                 Window = TimeSpan.FromMilliseconds(100),                 PermitLimit = 1,                 SegmentsPerWindow = 2,                 AutoReplenishment = false             }         );     } )  ipAddressLimiter.TryReplenish(); ```    Alternative Designs  No idea   Risks  _No response_
114147	area-System.Runtime	[API Proposal]: Add overload of Lazy<T> constructor which allows to turn off exception caching behaviour	 Background and motivation  `Lazy<T>` currency always caches exceptions When `LazyThreadSafetyMode` is `ExecutionAndPublication `or `None` and factory method is used. This often is not desired behavious as factory method often can throw exception caused by transient error.   API Proposal  Add overload with additional bool or enum parameter, which allows to explicitly indicate exception caching behaviour:  ```csharp  public Lazy(Func<T> valueFactory, LazyThreadSafetyMode mode, bool cacheException) ```    API Usage  ```csharp public class ExampleClass {   public DatabaseConnection DatabaseConnection => _databaseConnectionLazy .Value;    private DatabaseConnection GetConnection(){}      private Lazy<DatabaseConnection> _databaseConnectionLazy = new Lazy<DatabaseConnection>      (GetConnection, LazyThreadSafetyMode.ExecutionAndPublication, false); } ```    Alternative Designs  _No response_   Risks  _No response_
114144	Unlabeled	Unfamiliar crash in prod environmnet c0000005	  I started to get these exceptions from WPF app in a hardened prod environment after migrating to .net 9 not possible to reproduce on dev machines. These are from the prod event viewer and this is the only text there is, no other info: ``` .NET Version: 9.0.3 Description: The process was terminated due to an unhandled exception. Exception Info: exception code c0000005, exception address 00007FFFB640E42A ```   Reproduction Steps  not possible to repro   Expected behavior  a stack trace at least   Actual behavior  application crashes   Regression?  this has never happened in .net 7/8 for 2 yrs   Known Workarounds  _No response_   Configuration  9.0.3 Windows 10 x64  ``` M:\>dotnet --info .NET SDK: Version:           9.0.201 Commit:            071aaccdc2 Workload version:  9.0.200-manifests.21502d11 MSBuild version:   17.13.13+1c2026462  Runtime Environment: OS Name:     Windows OS Version:  10.0.19045 OS Platform: Windows RID:         win-x64 Base Path:   C:\Program Files\dotnet\sdk\9.0.201\  .NET workloads installed: There are no installed workloads to display. Configured to use loose manifests when installing new manifests.  Host:   Version:      9.0.3   Architecture: x64   Commit:       831d23e561  .NET SDKs installed:   8.0.302 [C:\Program Files\dotnet\sdk]   9.0.201 [C:\Program Files\dotnet\sdk]  .NET runtimes installed:   Microsoft.AspNetCore.App 8.0.6 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]   Microsoft.AspNetCore.App 9.0.3 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]   Microsoft.NETCore.App 7.0.20 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]   Microsoft.NETCore.App 8.0.6 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]   Microsoft.NETCore.App 8.0.8 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]   Microsoft.NETCore.App 9.0.3 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]   Microsoft.WindowsDesktop.App 7.0.20 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]   Microsoft.WindowsDesktop.App 8.0.6 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]   Microsoft.WindowsDesktop.App 8.0.8 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]   Microsoft.WindowsDesktop.App 9.0.3 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]  Other architectures found:   x86   [C:\Program Files (x86)\dotnet]     registered at [HKLM\SOFTWARE\dotnet\Setup\InstalledVersions\x86\InstallLocation]  Environment variables:   Not set  global.json file:   Not found ```   Other information  _No response_
114140	area-System.Runtime.InteropServices.JavaScript	[WASM][MT] Failing to start inside of a web worker	  The other day we started looking into what it'd take to enable multi threading for our wasmbrowser project that we utilize along an angular app, with the main purpose of utilizing a bunch of business logic within the browser written in C#.  We started the WASM component in a web-worker to off-load it from the "main" thread to avoid it looking UI when processing things. However, now with MT it does not seem to work - as it fails on startup during: `mono_wasm_pthread_on_pthread_attached->        currentWorkerThreadEvents.dispatchEvent(makeWorkerThreadEvent(dotnetPthreadAttached, pthread_self));` From what I have gathered it tries to do "dispatchEvent" on the "UI" thread which is also a worker.  ![Image](https://github.com/user-attachments/assets/5d9d4809-62d6-42e8-837f-f384527a9609)  ![Image](https://github.com/user-attachments/assets/1bca6e80-74e1-4254-a34b-6443987fb366)  This might not be a bug, but expected to not work - that the new MT design is meant to always be started in the web context and not in a worker context.   Reproduction Steps  wasmbrowser project `worker.js` ``` import { dotnet } from "./_framework/dotnet.js";  let modulePromise = null;  function loadWasm() {     console.log("SharedArrayBuffer available:", typeof SharedArrayBuffer !== 'undefined', globalThis);     console.info("Loading WASM module...");      return dotnet         .withConfig({             // cacheBootResources: true // currently not supported: https://github.com/dotnet/runtime/issues/97787         })         .create()         .then((net) => {             const { getAssemblyExports, getConfig } = net;             const config = getConfig();             return getAssemblyExports(config.mainAssemblyName);         })         .then((module) => {             console.info("WASM module loaded...");             return module;         }); }  function ensureLoaded() {     return !modulePromise         ? (modulePromise = loadWasm())         : modulePromise; }  function test() {     return ensureLoaded().then((module) =>         module.WasmClient.Test()     ); }  // dummied down for example addEventListener("message", (event) => {   if (event.data.method == "test") {       test().then((output) => {         postMessage({ result: output });       });   } }); ```  wasmbrowser C# sample code ``` using System.Runtime.InteropServices.JavaScript; using System.Threading.Tasks;  return; // Main entry point do not remove.  public partial class WasmClient {     [JSExport]     public static Task<string> Test()     {         return Task.FromResult("Hello from C#");     } } ```  Then from JS side depending how you configure it ``` var worker = new Worker('./assets/wasm/worker.js', { type: 'module' }); worker.addEventListener('message', (event) => { console.log(event); // log output from wasm }); worker.postMessage({   method: "test" }); ```  Feel free to ping me if I should setup a repo project for simplification.   Expected behavior  Expected behaviour is that the wasm project loads inside of the worker, the method is called and returns the `Hello from C#`. Note: This works just fine if you turn off multithreading.   Actual behavior  ![Image](https://github.com/user-attachments/assets/01345f6e-35d0-4bc3-a8d7-db4d2e24f4ea)   Regression?  Not that we know of - might be an untested territory, worth to note - this works just fine without "MT" enabled.   Known Workarounds  _No response_   Configuration  ``` <PropertyGroup>  <TargetFramework>net9.0</TargetFramework>  <RuntimeIdentifier>browser-wasm</RuntimeIdentifier> <OutputType>Exe</OutputType>  <WasmMainJSPath>main.js</WasmMainJSPath><!-- points towards an empty file with console log -->  <WasmEnableSIMD>true</WasmEnableSIMD>  <WasmEnableThreads>true</WasmEnableThreads>  <TrimMode>partial</TrimMode>  <PublishTrimmed>true</PublishTrimmed>  <WasmBuildNative>true</WasmBuildNative>  <AllowUnsafeBlocks>true</AllowUnsafeBlocks>  <PublishWithAot>false</PublishWithAot>  <WasmStripILAfterAOT>false</WasmStripILAfterAOT>  <WasmAppDir>../webapp/src/assets/wasm</WasmAppDir><!-- adjust accordingly --> </PropertyGroup> ```  Build project with `dotnet publish` and the files needed will be copied if `WasmAppDir` is configured correctly.   Other information  mono_wasm_pthread_on_pthread_attached being called for the "UI" aka main thread even though the comment says it should not. But when the main thread is a worker it fails some pre-check (is the initial guess)
114134	area-NativeAOT-coreclr	HOW TO build Microsoft.NETCore.App.Runtime.NativeAOT.linux-bionic-arm64?	  for some reason I want to build Microsoft.NETCore.App.Runtime.NativeAOT.linux-bionic-arm64 myself and use it,is there any documents to introduce how to build this package?thanks   Reproduction Steps  build Microsoft.NETCore.App.Runtime.NativeAOT.linux-bionic-arm64   Expected behavior  have some documents to build Microsoft.NETCore.App.Runtime.NativeAOT.linux-bionic-arm64   Actual behavior  not found documents to build Microsoft.NETCore.App.Runtime.NativeAOT.linux-bionic-arm64   Regression?  _No response_   Known Workarounds  _No response_   Configuration  _No response_   Other information  _No response_
114133	area-System.Runtime.InteropServices	[API Proposal]: 'ComWrappers' methods to get runtime-provided 'IUnknown' CCW vtable entries	# Contributes to #114024  Same motivation and context as the linked issue. This proposal is for an ILC-friendly set of APIs to build `IUnknown` CCW vtables. Original suggestion for the shape by @jkotas in https://github.com/dotnet/runtime/issues/114024#issuecomment-2770306888.  > [!IMPORTANT] > We **can't** just use the existing `ComWrappers.GetIUnknownImpl`, as its shape is too difficult for ILC to interpret it.   API Proposal  ```csharp namespace System.Runtime.InteropServices;  public abstract class ComWrappers {     public static IntPtr GetIUnknownQueryInterfaceImpl();     public static IntPtr GetIUnknownAddRefImpl();     public static IntPtr GetIUnknownReleaseImpl(); } ```    API Usage  ```csharp // Eg. in WinRT.Runtime.dll internal unsafe struct IInspectableVftbl {     public delegate* unmanaged[MemberFunction]<void*, Guid*, void**, int> QueryInterface;     public delegate* unmanaged[MemberFunction]<void*, uint> AddRef;     public delegate* unmanaged[MemberFunction]<void*, uint> Release;     public delegate* unmanaged[MemberFunction]<void*, uint*, Guid**, int> GetIids;     public delegate* unmanaged[MemberFunction]<void*, nint*, int> GetRuntimeClassName;     public delegate* unmanaged[MemberFunction]<void*, int*, int> GetTrustLevel; }  internal static unsafe class IInspectableImpl {     [FixedAddressValueType]     private static readonly IInspectableVftbl Vftbl;          public static nint AbiToProjectionVftablePtr => (nint)Unsafe.AsPointer(ref Unsafe.AsRef(in Vftbl));      static IInspectableImpl()     {         Vftbl.QueryInterface = (delegate* unmanaged[MemberFunction]<void*, Guid*, void**, int>)ComWrappers.GetIUnknownQueryInterfaceImpl();         Vftbl.AddRef = (delegate* unmanaged[MemberFunction]<void*, uint>)ComWrappers.GetIUnknownAddRefImpl();         Vftbl.Release = (delegate* unmanaged[MemberFunction]<void*, uint>)ComWrappers.GetIUnknownReleaseImpl();         Vftbl.GetIids = &GetIids;         Vftbl.GetRuntimeClassName = &GetRuntimeClassName;         Vftbl.GetTrustLevel = &GetTrustLevel;     }      [UnmanagedCallersOnly(CallConvs = [typeof(CallConvMemberFunction)])]     private static int GetIids(void* thisPtr, uint* iidCount, Guid** iids)     {         *iidCount = 0;         *iids = null;          return 0;     }      [UnmanagedCallersOnly(CallConvs = [typeof(CallConvMemberFunction)])]     private static int GetRuntimeClassName(void* thisPtr, nint* className)     {         *className = default;          return 0;     }      [UnmanagedCallersOnly(CallConvs = [typeof(CallConvMemberFunction)])]     private static int GetTrustLevel(void* thisPtr, int* trustLevel)     {         *trustLevel = 0;          return 0;     } } ```
114132	area-Infrastructure-mono	[Android] CI flakiness: App fails to start in time and gets killed	 Build Information Build: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=1001130 Build error leg or test failing: Android.Device_Emulator.JIT.Test.WorkItemExecution Pull request: https://github.com/dotnet/runtime/pull/112937 <!-- Error message template  -->  Error Message  Fill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).  <!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. -->  ```json {   "ErrorMessage": "",   "ErrorPattern": "ActivityManager.*net.dot.*start timeout",   "BuildRetry": false,   "ExcludeConsoleLog": false } ```  The logcat shows e.g. this:  ``` 04-01 16:41:37.114 15173 15237 I ActivityManager: Killing 23741:net.dot.Android.Device_Emulator.JIT.Test/u0a134 (adj -10000): start timeout ```  I also noticed that once the app is killed by ActivityManager we don't notice that in xharness and we still wait until the xharness timeout and try to kill the (already dead) app. <!-- Known issue validation start -->   Known issue validation **Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=1001130 **Error message validated:** `[ActivityManager.*net.dot.*start timeout`] **Result validation:** :white_check_mark: Known issue matched with the provided build. **Validation performed at:** 4/1/2025 11:16:29 PM UTC <!-- Known issue validation end --> <!--Known issue error report start -->   Report  |Build|Definition|Test|Pull Request| |---|---|---|---| |[1001130](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1001130)|dotnet/runtime|[Android.Device_Emulator.JIT.Test.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1001130&view=ms.vss-test-web.build-test-results-tab&runId=26718560&resultId=100001)|dotnet/runtime#112937| # Summary |24-Hour Hit Count|7-Day Hit Count|1-Month Count| |---|---|---| |0|1|1| <!--Known issue error report end -->
114129	area-System.Security	[PERF] Occasionally hitting CryptographicException on performance CI runs	  In the [dotnet/performance](https://github.com/dotnet/performance) repo ci runs, we are occasionally hitting errors while running some of the Security tests. This pops up in most of our overall ci runs but not consistently across all the tests of similar types. The failing test is also not consistently the same test. Being part of our ci runs, these are being run in containers in the Azure pipelines agents. The specific container is mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-22.04 and is running on an Ubuntu 22.04 agent.   Part of this issue is to figure out if this is something that can somewhat be expected to be flaky on VMs and we should disable the tests for VM runs, or if there is an issue worth investigating. We are not seeing this on our full bare-metal testing, so it is only impacting our ci.   Example run: https://dev.azure.com/dnceng-public/public/_build/results?buildId=1001256&view=logs&j=ae025322-dfce-5e7d-abab-0043144d2912&t=af5e1e87-c830-5989-f0c8-c9ce5f9f1829, job "performance micro ubuntu 2204 Open 9.0" -> "send to helix" failing job.   Reproduction Steps  Untested repro (run on a VM): Clone [dotnet/performance](https://github.com/dotnet/performance). From the top level the performance repo, run `python3 ./scripts/benchmarks_ci.py --csproj ./src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture x64 -f net9.0 --dotnet-versions 9.0.105-servicing.25164.42 --bdn-arguments="--anyCategories Libraries Runtime --logBuildOutput --generateBinLog --filter *SslStreamTests*"`   Expected behavior  Test runs successfully.   Actual behavior  Full benchmark run with error: ``` // Benchmark: SslStreamTests.HandshakeRSA4096CertAsync: Job-ZTJJFB(PowerPlanMode=00000000-0000-0000-0000-000000000000, InvocationCount=1, IterationCount=1, IterationTime=250ms, MaxIterationCount=20, MinIterationCount=15, RunStrategy=ColdStart, UnrollFactor=1, WarmupCount=0) [protocol=Tls12] // *** Execute *** // Launch: 1 / 1 // Execute: dotnet MicroBenchmarks-Job-ZTJJFB-1.dll --anonymousPipes 224 225 --benchmarkName "System.Net.Security.Tests.SslStreamTests.HandshakeRSA4096CertAsync(protocol: Tls12)" --job "PowerPlanMode=00000000-0000-0000-0000-000000000000, InvocationCount=1, IterationCount=1, IterationTime=250ms, MaxIterationCount=20, MinIterationCount=15, RunStrategy=ColdStart, UnrollFactor=1, WarmupCount=0" --benchmarkId 189 in /datadisks/disk1/work/AB3E0955/w/9BCA083E/e/performance/artifacts/bin/MicroBenchmarks/Release/net9.0/MicroBenchmarks-Job-ZTJJFB-1/bin/Release/net9.0 // Failed to set up high priority (Permission denied). In order to run benchmarks with high priority, make sure you have the right permissions. // BeforeAnythingElse  // Benchmark Process Environment Information: // BenchmarkDotNet v0.14.1-nightly.20250107.205 // Runtime=.NET 9.0.3 (9.0.325.11113), X64 RyuJIT AVX2 // GC=Concurrent Workstation // HardwareIntrinsics=AVX2,AES,BMI1,BMI2,FMA,LZCNT,PCLMUL,POPCNT VectorSize=256 // Job: Job-VKMUPW(PowerPlanMode=00000000-0000-0000-0000-000000000000, InvocationCount=1, IterationCount=1, IterationTime=250ms, MaxIterationCount=20, MinIterationCount=15, RunStrategy=ColdStart, UnrollFactor=1, WarmupCount=0)  // BeforeActualRun  System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation.  ---> System.Security.Cryptography.CryptographicException: Error occurred during a cryptographic operation.    at System.Security.Cryptography.X509Certificates.OpenSslX509ChainProcessor.MapOpenSsl30Code(X509VerifyStatusCode code)    at System.Security.Cryptography.X509Certificates.OpenSslX509ChainProcessor.MapVerifyErrorToChainStatus(X509VerifyStatusCode code)    at System.Security.Cryptography.X509Certificates.OpenSslX509ChainProcessor.AddElementStatus(X509VerifyStatusCode errorCode, List`1 elementStatus, List`1 overallStatus, Boolean& overallHasNotSignatureValid)    at System.Security.Cryptography.X509Certificates.OpenSslX509ChainProcessor.AddElementStatus(ErrorCollection errorCodes, List`1 elementStatus, List`1 overallStatus, Boolean& overallHasNotSignatureValid)    at System.Security.Cryptography.X509Certificates.OpenSslX509ChainProcessor.BuildChainElements(WorkingChain workingChain, List`1& overallStatus)    at System.Security.Cryptography.X509Certificates.OpenSslX509ChainProcessor.Finish(OidCollection applicationPolicy, OidCollection certificatePolicy)    at System.Security.Cryptography.X509Certificates.ChainPal.BuildChainCore(Boolean useMachineContext, ICertificatePal cert, X509Certificate2Collection extraStore, OidCollection applicationPolicy, OidCollection certificatePolicy, X509RevocationMode revocationMode, X509RevocationFlag revocationFlag, X509Certificate2Collection customTrustStore, X509ChainTrustMode trustMode, DateTime verificationTime, TimeSpan timeout, Boolean disableAia)    at System.Security.Cryptography.X509Certificates.ChainPal.BuildChain(Boolean useMachineContext, ICertificatePal cert, X509Certificate2Collection extraStore, OidCollection applicationPolicy, OidCollection certificatePolicy, X509RevocationMode revocationMode, X509RevocationFlag revocationFlag, X509Certificate2Collection customTrustStore, X509ChainTrustMode trustMode, DateTime verificationTime, TimeSpan timeout, Boolean disableAia)    at System.Security.Cryptography.X509Certificates.X509Chain.Build(X509Certificate2 certificate, Boolean throwOnException)    at System.Net.Security.SslStreamCertificateContext.Create(X509Certificate2 target, X509Certificate2Collection additionalCertificates, Boolean offline, SslCertificateTrust trust, Boolean noOcspFetch)    at System.Net.Security.SslAuthenticationOptions.UpdateOptions(SslServerAuthenticationOptions sslServerAuthenticationOptions)    at System.Net.Security.SslStream.AuthenticateAsServerAsync(SslServerAuthenticationOptions sslServerAuthenticationOptions, CancellationToken cancellationToken)    at System.Net.Security.Tests.SslStreamTests.HandshakeAsync(X509Certificate certificate, SslProtocols sslProtocol) in /datadisks/disk1/work/AB3E0955/w/9BCA083E/e/performance/src/benchmarks/micro/libraries/System.Net.Security/SslStreamTests.cs:line 189    at BenchmarkDotNet.Helpers.AwaitHelper.GetResult(Task task)    at BenchmarkDotNet.Autogenerated.Runnable_189.<.ctor>b__3_2(SslProtocols arg0) in /datadisks/disk1/work/AB3E0955/w/9BCA083E/e/performance/artifacts/bin/MicroBenchmarks/Release/net9.0/MicroBenchmarks-Job-ZTJJFB-1/MicroBenchmarks-Job-ZTJJFB-1.notcs:line 33258    at BenchmarkDotNet.Autogenerated.Runnable_189.WorkloadActionUnroll(Int64 invokeCount) in /datadisks/disk1/work/AB3E0955/w/9BCA083E/e/performance/artifacts/bin/MicroBenchmarks/Release/net9.0/MicroBenchmarks-Job-ZTJJFB-1/MicroBenchmarks-Job-ZTJJFB-1.notcs:line 33332    at BenchmarkDotNet.Engines.Engine.Measure(Action`1 action, Int64 invokeCount)    at BenchmarkDotNet.Engines.Engine.RunIteration(IterationData data)    at BenchmarkDotNet.Engines.EngineStage.RunIteration(IterationMode mode, IterationStage stage, Int32 index, Int64 invokeCount, Int32 unrollFactor)    at BenchmarkDotNet.Engines.EngineActualStage.RunSpecific(Int64 invokeCount, IterationMode iterationMode, Int32 iterationCount, Int32 unrollFactor)    at BenchmarkDotNet.Engines.EngineActualStage.Run(Int64 invokeCount, IterationMode iterationMode, Boolean runAuto, Int32 unrollFactor, Boolean forceSpecific)    at BenchmarkDotNet.Engines.EngineActualStage.RunWorkload(Int64 invokeCount, Int32 unrollFactor, Boolean forceSpecific)    at BenchmarkDotNet.Engines.Engine.Run()    at BenchmarkDotNet.Autogenerated.Runnable_189.Run(IHost host, String benchmarkName) in /datadisks/disk1/work/AB3E0955/w/9BCA083E/e/performance/artifacts/bin/MicroBenchmarks/Release/net9.0/MicroBenchmarks-Job-ZTJJFB-1/MicroBenchmarks-Job-ZTJJFB-1.notcs:line 33239    at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)    at System.Reflection.MethodBaseInvoker.InvokeDirectByRefWithFewArgs(Object obj, Span`1 copyOfArgs, BindingFlags invokeAttr)    --- End of inner exception stack trace ---    at System.Reflection.MethodBaseInvoker.InvokeDirectByRefWithFewArgs(Object obj, Span`1 copyOfArgs, BindingFlags invokeAttr)    at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)    at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)    at BenchmarkDotNet.Autogenerated.UniqueProgramName.AfterAssemblyLoadingAttached(String[] args) in /datadisks/disk1/work/AB3E0955/w/9BCA083E/e/performance/artifacts/bin/MicroBenchmarks/Release/net9.0/MicroBenchmarks-Job-ZTJJFB-1/MicroBenchmarks-Job-ZTJJFB-1.notcs:line 57 // AfterAll No Workload Results were obtained from the run. // Benchmark Process 115213 has exited with code 255. ```   Regression?  _No response_   Known Workarounds  _No response_   Configuration  We see this happening on tests of both the latest net10.0 and the latest net9.0 dotnet versions. We are only seeing this on our Linux runs, Ubuntu 22.04.    Other information  _No response_
114128	area-System.Net.Quic	TaskScheduler.UnobservedTaskException catches quic exceptions with kestrel combined with grpc + http3	  I've got a grpc service that has been running for sometime using just http2. I recently enabled http3 to see if there would be any performance benefit or improvement in connectivity some users were facing. I noticed almost immediately some exceptions were being caught where previously there weren't any.  Three different exceptions, all slightly different seem to be thrown  ``` 2025-04-01T15:54:54.8403559-07:00 CRIT [LogicBase] [0] System.AggregateException: A Task's exception(s) were not observed either by Waiting on the Task or accessing its Exception property. As a result, the unobserved exception was rethrown by the finalizer thread. (Connection aborted by peer (256).)  ---> System.Net.Quic.QuicException: Connection aborted by peer (256).    at System.Net.Quic.QuicConnection.HandleEventShutdownInitiatedByPeer(_SHUTDOWN_INITIATED_BY_PEER_e__Struct& data)    at System.Net.Quic.QuicConnection.HandleConnectionEvent(QUIC_CONNECTION_EVENT& connectionEvent)    at System.Net.Quic.QuicConnection.NativeCallback(QUIC_HANDLE* connection, Void* context, QUIC_CONNECTION_EVENT* connectionEvent) --- End of stack trace from previous location ---    at System.Net.Quic.QuicConnection.AcceptInboundStreamAsync(CancellationToken cancellationToken)    at Microsoft.AspNetCore.Server.Kestrel.Transport.Quic.Internal.QuicConnectionContext.AcceptAsync(CancellationToken cancellationToken)    --- End of inner exception stack trace ---           2025-04-01T15:54:54.8406298-07:00 CRIT [LogicBase] [0] System.AggregateException: A Task's exception(s) were not observed either by Waiting on the Task or accessing its Exception property. As a result, the unobserved exception was rethrown by the finalizer thread. (Connection aborted by peer (256).)  ---> System.Net.Quic.QuicException: Connection aborted by peer (256).    at System.Net.Quic.ResettableValueTaskSource.TryComplete(Exception exception, Boolean final)    at System.Net.Quic.QuicStream.HandleEventShutdownComplete(_SHUTDOWN_COMPLETE_e__Struct& data)    at System.Net.Quic.QuicStream.HandleStreamEvent(QUIC_STREAM_EVENT& streamEvent)    at System.Net.Quic.QuicStream.NativeCallback(QUIC_HANDLE* connection, Void* context, QUIC_STREAM_EVENT* streamEvent) --- End of stack trace from previous location ---    at System.Net.Quic.ResettableValueTaskSource.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)    at System.Net.Quic.QuicStream.ReadAsync(Memory`1 buffer, CancellationToken cancellationToken)    at Microsoft.AspNetCore.Server.Kestrel.Transport.Quic.Internal.QuicStreamContext.DoReceiveAsync()    --- End of inner exception stack trace ---            2025-04-01T15:54:54.8410699-07:00 CRIT [LogicBase] [0] System.AggregateException: A Task's exception(s) were not observed either by Waiting on the Task or accessing its Exception property. As a result, the unobserved exception was rethrown by the finalizer thread. (Connection aborted by peer (256).)  ---> Microsoft.AspNetCore.Connections.ConnectionResetException: Connection aborted by peer (256).  ---> System.Net.Quic.QuicException: Connection aborted by peer (256).    at System.Net.Quic.ResettableValueTaskSource.TryComplete(Exception exception, Boolean final)    at System.Net.Quic.QuicStream.HandleEventShutdownComplete(_SHUTDOWN_COMPLETE_e__Struct& data)    at System.Net.Quic.QuicStream.HandleStreamEvent(QUIC_STREAM_EVENT& streamEvent)    at System.Net.Quic.QuicStream.NativeCallback(QUIC_HANDLE* connection, Void* context, QUIC_STREAM_EVENT* streamEvent) --- End of stack trace from previous location ---    at System.Net.Quic.ResettableValueTaskSource.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)    at System.Net.Quic.QuicStream.ReadAsync(Memory`1 buffer, CancellationToken cancellationToken)    at Microsoft.AspNetCore.Server.Kestrel.Transport.Quic.Internal.QuicStreamContext.DoReceiveAsync()    --- End of inner exception stack trace ---    at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)    at System.IO.Pipelines.Pipe.GetReadAsyncResult()    at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http3.Http3ControlStream.HandleControlStream()    at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http3.Http3ControlStream.ProcessRequestAsync[TContext](IHttpApplication`1 application)    --- End of inner exception stack trace ---          ```  There maybe more exceptions, but when it happens so many are generated its hard for me to tell.     Reproduction Steps  I'm not exactly sure what's happening on the clientside to produce the issue, but the serverside setup is almost exactly a basic copy of   https://protobuf-net.github.io/protobuf-net.Grpc/gettingstarted  with http3 enabled.   Expected behavior  Exceptions are handled in the layer they are being generated   Actual behavior  Exceptions are going uncaught   Regression?  _No response_   Known Workarounds  _No response_   Configuration  _No response_   Other information  I'm currently using .net8, but I also tried upgrading to .net9 but the issue persisted. Possibly related to https://github.com/dotnet/runtime/issues/80111 ?
114127	Unlabeled	Getting sddl string for ACLS with ACEs having Conditional Access Policy	  Would it be possible to support Conditional Aces for below function ?  https://github.com/mono/mono/blob/main/mcs/class/corlib/System.Security.AccessControl/CommonAce.cs  `  internal override string GetSddlForm ()  {   if (OpaqueLength != 0)    throw new NotImplementedException (      "Unable to convert conditional ACEs to SDDL");      return string.Format (CultureInfo.InvariantCulture,                         "({0};{1};{2};;;{3})",                         GetSddlAceType (AceType),                         GetSddlAceFlags (AceFlags),                         GetSddlAccessRights (AccessMask),                         SecurityIdentifier.GetSddlForm ());  } `   Reproduction Steps  Call GetSddlForm with an acl having Conditional Aces   Expected behavior  GetSddlForm should return the sddl   Actual behavior  `GetSddlForm` fails with `System.NotImplementedException: Unable to convert conditional ACEs to SDDL`   Regression?  No   Known Workarounds  _No response_   Configuration  _No response_   Other information  _No response_
114123	area-Infrastructure-mono	CI flakiness: mono interpreter build getting killed	 Build Information Build: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=998900&view=logs&j=3e93a48f-6568-53f2-76b3-1285c183c39d Build error leg or test failing: Build / browser-wasm linux Release AllSubsets_Mono_RuntimeTests monointerpreter / Build Tests Pull request: https://github.com/dotnet/runtime/pull/114058 <!-- Error message template  -->  Error Message  Fill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).  <!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. -->  ```json {   "ErrorMessage": "",   "ErrorPattern": "RuntimeVariant=monointerpreter.*exited with code 137",   "BuildRetry": false,   "ExcludeConsoleLog": false } ```   <!-- Known issue validation start -->   Known issue validation **Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=998900 **Error message validated:** `[RuntimeVariant=monointerpreter*exited with code 137.`] **Result validation:** :x: Known issue did not match with the provided build. **Validation performed at:** 4/1/2025 9:14:37 PM UTC <!-- Known issue validation end --> <!-- Known issue validation start -->   Known issue validation **Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=998900 **Error message validated:** `[RuntimeVariant=monointerpreter.*exited with code 137`] **Result validation:** :white_check_mark: Known issue matched with the provided build. **Validation performed at:** 4/1/2025 9:15:42 PM UTC <!-- Known issue validation end --> <!--Known issue error report start -->   Report |Build|Definition|Step Name|Console log|Pull Request| |---|---|---|---|---| |[1005302](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005302)|dotnet/runtime|Build Tests|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1005302/logs/945)|dotnet/runtime#113948| |[1005289](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005289)|dotnet/runtime|Build Tests|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1005289/logs/1957)|| |[1005219](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005219)|dotnet/runtime|Build Tests|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1005219/logs/1906)|dotnet/runtime#114080| |[1005171](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005171)|dotnet/runtime|Build Tests|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1005171/logs/2095)|| |[1005163](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005163)|dotnet/runtime|Build Tests|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1005163/logs/1204)|dotnet/runtime#113924| |[1005089](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005089)|dotnet/runtime|Build Tests|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1005089/logs/1911)|dotnet/runtime#114080| |[1005077](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005077)|dotnet/runtime|Build Tests|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1005077/logs/793)|dotnet/runtime#114255| |[1005040](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1005040)|dotnet/runtime|Build Tests|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1005040/logs/1885)|dotnet/runtime#114137| |[1004820](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004820)|dotnet/runtime|Build Tests|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1004820/logs/1616)|dotnet/runtime#114245| |[1004711](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004711)|dotnet/runtime|Build Tests|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1004711/logs/1541)|dotnet/runtime#114240| |[1004743](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004743)|dotnet/runtime|Build Tests|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1004743/logs/1748)|| |[1004490](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004490)|dotnet/runtime|Build Tests|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1004490/logs/1474)|dotnet/runtime#114080| |[1004465](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004465)|dotnet/runtime|Build Tests|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1004465/logs/1480)|dotnet/runtime#113765| |[1004331](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004331)|dotnet/runtime|Build Tests|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1004331/logs/1478)|| |[1004282](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004282)|dotnet/runtime|Build Tests|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1004282/logs/608)|dotnet/runtime#114215| |[1004249](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004249)|dotnet/runtime|Build Tests|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1004249/logs/1804)|| |[1004219](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004219)|dotnet/runtime|Build Tests|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1004219/logs/1149)|dotnet/runtime#114218| |[1004131](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004131)|dotnet/runtime|Build Tests|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1004131/logs/1889)|| |[1004125](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004125)|dotnet/runtime|Build Tests|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1004125/logs/1731)|dotnet/runtime#114210| |[1004074](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004074)|dotnet/runtime|Build Tests|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1004074/logs/997)|dotnet/runtime#114107| |[1004017](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1004017)|dotnet/runtime|Build Tests|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1004017/logs/792)|dotnet/runtime#114203| |[1003986](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003986)|dotnet/runtime|Build Tests|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1003986/logs/1798)|dotnet/runtime#114185| |[1003836](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003836)|dotnet/runtime|Build Tests|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1003836/logs/1328)|dotnet/runtime#114201| |[1003950](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003950)|dotnet/runtime|Build Tests|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1003950/logs/1694)|dotnet/runtime#114080| |[1003870](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003870)|dotnet/runtime|Build Tests|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1003870/logs/815)|dotnet/runtime#114203| |[1003501](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003501)|dotnet/runtime|Build Tests|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1003501/logs/1383)|dotnet/runtime#113977| |[1002998](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002998)|dotnet/runtime|Build Tests|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1002998/logs/1452)|dotnet/runtime#113449| |[1002986](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002986)|dotnet/runtime|Build Tests|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1002986/logs/1443)|dotnet/runtime#113822| |[1002983](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002983)|dotnet/runtime|Build Tests|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1002983/logs/1449)|dotnet/runtime#113821| |[1003120](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003120)|dotnet/runtime|Build Tests|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1003120/logs/1484)|dotnet/runtime#114080| |[1002939](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002939)|dotnet/runtime|Build Tests|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1002939/logs/1513)|dotnet/runtime#113516| |[1003107](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003107)|dotnet/runtime|Build Tests|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1003107/logs/1776)|| |[1003022](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1003022)|dotnet/runtime|Build Tests|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1003022/logs/882)|dotnet/runtime#114087| |[1002643](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002643)|dotnet/runtime|Build Tests|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1002643/logs/2164)|dotnet/runtime#113765| |[1002831](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002831)|dotnet/runtime|Build Tests|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1002831/logs/1610)|dotnet/runtime#110818| |[1002364](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002364)|dotnet/runtime|Build Tests|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1002364/logs/1312)|dotnet/runtime#114049| |[1002211](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002211)|dotnet/runtime|Build Tests|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1002211/logs/1195)|dotnet/runtime#114107| |[1002195](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002195)|dotnet/runtime|Build Tests|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1002195/logs/989)|dotnet/runtime#113924| |[1002178](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002178)|dotnet/runtime|Build Tests|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1002178/logs/2281)|| |[1002026](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002026)|dotnet/runtime|Build Tests|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1002026/logs/1892)|dotnet/runtime#114137| |[1001908](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1001908)|dotnet/runtime|Build Tests|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1001908/logs/957)|dotnet/runtime#113948| |[1001619](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1001619)|dotnet/runtime|Build Tests|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1001619/logs/1828)|dotnet/runtime#113954| |[1001481](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1001481)|dotnet/runtime|Build Tests|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1001481/logs/2145)|| |[1001130](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1001130)|dotnet/runtime|Build Tests|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/1001130/logs/1771)|dotnet/runtime#112937| |[998900](https://dev.azure.com/dnceng-public/public/_build/results?buildId=998900)|dotnet/runtime|Build Tests|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/998900/logs/1840)|dotnet/runtime#114058| |[998004](https://dev.azure.com/dnceng-public/public/_build/results?buildId=998004)|dotnet/runtime|Build Tests|[Log](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_apis/build/builds/998004/logs/656)|dotnet/runtime#113743| # Summary |24-Hour Hit Count|7-Day Hit Count|1-Month Count| |---|---|---| |21|46|46| <!--Known issue error report end -->
114122	area-Codegen-Intrinsics-mono	[wasm][interpreter] PackedSimd.IsSupported is false until the app is trimmed	For some reason that is not immediately apparent to me PackSimd.IsSupported is false until publish has run on the interpreter (where trimming will set it to true)
114116	area-System.Buffers	ConfigurableArrayPool shoud use GC.AllocateUninitializedArray<T>	ConfigurableArrayPool shoud use GC.AllocateUninitializedArray instead of new T[].    SharedArrayPool use GC.AllocateUninitializedArray<T>:  ``` buffer = GC.AllocateUninitializedArray<T>(minimumLength); ```  There are four line with new T[] in ConfigurableArrayPool.cs. Probably all of them can be replaced with GC.AllocateUninitializedArray<T>. 
114113	area-Tools-ILLink	EventInfo.EventHandlerType.GetMethod("Invoke") could be made trim safe	`EventHandlerType` is going to be a delegate and we keep the `Invoke` method on all delegates as a rule. We could analyze this and avoid a warning.  Alternatively, we could introduce a new API on `EventInfo` to get the `MethodInfo` for the delegate `Invoke` method. `EventInfo` already has such proxy shortcut property such as `EventInfo.IsMulticast`
114109	area-NativeAOT-coreclr	Exclude generic types with parameters that do not satisfy constraints	  When analyzing my application using sizoscope, I discovered that the final build contains generic classes whose type parameters violate the declared constraints. This can lead to an increase in the build size and create confusion during code analysis.  Example class: ``` internal sealed class GenericMathConverter<TFrom, TTo> : TypeConverterBase<TFrom, TTo>     where TFrom : INumberBase<TFrom>     where TTo : INumberBase<TTo> {     public override bool TryConvert(TFrom from, [MaybeNullWhen(false)] out TTo value)     {         try         {             value = TTo.CreateTruncating(from);             return true;         }         catch         {             value = default;             return false;         }     } } ``` An instance of this class is created via reflection as follows: ``` if (typeof(ISpanFormattable).IsAssignableFrom(typeof(TFrom)) && typeof(IComparable<TFrom>).IsAssignableFrom(typeof(TFrom)) &&     typeof(ISpanFormattable).IsAssignableFrom(typeof(TTo)) && typeof(IComparable<TTo>).IsAssignableFrom(typeof(TTo))) {     return Activator.CreateInstance(typeof(GenericMathConverter<,>).MakeGenericType(typeof(TFrom), typeof(TTo))); } ``` Note that the reflection creation condition checks for `ISpanFormattable` and `IComparable<T>`, whereas the class constraints require the implementation of INumberBase<T> but I can't check it in runtime and I use these interfaces to reduce false positive creation.  This is a screenshot from the sizoscope, it contains a lot of types which do not implement the `INumberBase` interface moreover they do not implement `ISpanFormattable` and `IComparable<T>` (I included only part of them). They cannot be physically used even if one attempts to create them via reflection as the constraints will prevent it. Therefore, the question arises, why include these types in the release build? <img width="792" alt="Image" src="https://github.com/user-attachments/assets/72d54df5-e64e-41d5-9511-75097c0755bc" />   Reproduction Steps  Attempt to create a generic type via reflection using types that violate the constraints, and then verify the result with sizoscope.   Expected behavior  The type should not be included in the release build.   Actual behavior  The type is included in the release build.   Regression?  _No response_   Known Workarounds  _No response_   Configuration  _No response_   Other information  _No response_
114106	area-System.Text.Json	How to create a symmetrical JSON class for reading and writing that is intuitive with [JsonExtensionData]?	We're experimenting with how we can provide the most intuitive, developer friendly experience for reading and writing additional properties for OpenAPI and are struggling to use `[JsonExtensionData]`.  The ideal experience for end users would be  * As intuitive as creating an anonymous object or `Dictionary<string, object?>` * Symmetrical, in both the signature of the property, but ideally also the concrete types * The output is consistent whether the JSON number is short or big.  As it is today, there are three signatures to use with `[JsonExtensionData]`: * `IDictionary<string, JsonElement>`:   * **Positive**: This is great for reading properties and forcing the end user to very explicitly and verbosely pick the data type. For example, from a JSON number, you can't really predict whether a property will consistently return an int, double, decimal, float, etc, and the `JsonElement` forces the user to explicitly make that decision, fe `JsonElement.GetUInt16()`.    * **Negative**: To set the value you have to create a JsonElement which isn't intuitively created and I assume has poor performance characteristics, fe: `recordForReading.AdditionalProperties["author"] = JsonDocument.Parse("\"J.R.R. Tolkien\"").RootElement` * `IDictionary<string, object?>`:   * **Positive**: This is as intuitive as it can possibly be in .NET to write additional properties without needing to create JsonNode's or JsonElement's. Just put in data into the value and the JSON serializer takes care of properly writing it.   * **Negative**:      * When you're creating the additional properties, and immediately read them, the values have the original types you gave them, but when it is serialized and deserialized, the values are `JsonElement`'s. Maybe this isn't actually a problem, but I'm worried this will surprise our users.     * When deserializing JSON, the user sees `object` but the concrete type is always `JsonElement` which seems unintuive/deceiving. I would personally naively check for `is string` or `is int` etc. * `JsonObject`:   * **Positive**:      * It's almost as intiutive as `Dictionary<string, object?>` because simple values are implicitly cast to `JsonNode`'s, fe: `recordSymmetrical.AdditionalProperties["author"] = "J.R.R. Tolkien"`.     * The property is consistent and predictable a `JsonObject`.   * **Negative**:      * Some types can't be implicitly casted, fe:        ```csharp       string[] tags = ["fantasy", "adventure"];       recordSymmetrical.AdditionalProperties["tags"] = JsonValue.Create(tags);       ```     * `JsonObject` with `ExtensionData` cannot be used to write values currently, because of [an open bug](https://github.com/dotnet/runtime/issues/97225).  IMO, the best experience for reading is `IDictionary<string, JsonElement>` and `JsonObject`, while the best writing experience is `IDictionary<string, object?>`, and the best of both worlds is `JsonObject` if the [bug were to be resolved](https://github.com/dotnet/runtime/issues/97225).  `additionalProperties` in OpenAPI, the equivalent of `ExtensionData` is becoming more common needed with us gaining traction in the AI and embedding space (we work with [Pinecone on their .NET SDK](https://github.com/pinecone-io/pinecone-dotnet-client)).  ---  FYI, [I wrote a little sample that plays with these different signatures here](https://github.com/Swimburger/AdditionalProperties/blob/main/AdditionalProperties/Program.cs), and they have indexers to make it more intuitive.  For context, we generate code based on multiple spec formats (OpenAPI/AsyncAPI/proto) and merge them into intuitive SDKs, and I am personally invested in giving .NET devs the best SDKs possible balancing developer experience and performance. How would you recommend providing intuitive classes with extension data that can be used for both writing and reading?
114104	area-System.Numerics	Custom Numeric Format String Rounds Erroneously	  `double` precision floating point values appear to get erroneously rounded by custom format strings using `#` when they exceed a threshold of decimal precision.   It appears to occur when we exceed 13 digits of decimal precision (to the right of the decimal point). For example, given the custom format string `0.` ('up to fourteen decimal digits'), the value `28.5999999999998` (thirteen decimal digits) will render as a string correctly, but `28.59999999999998` (fourteen decimal digits) will be rendered as `28.6`.   Reproduction Steps  var x1 = 28.5999999999998d; var x2 = 28.59999999999998d;  Console.WriteLine($"{x1:0.}"); // "28.5999999999998" Console.WriteLine($"{x2:0.}"); // "28.6"    Expected behavior  As long as the number of `#` to the right of the decimal meets or exceeds the number of decimal digits in the value, the full exact decimal value should be preserved in the string output.   Actual behavior  When the decimal digits exceeds thirteen, the custom string format executes erroneous rounding against the developer's request, and without offering e.g. an error or exception regarding an invalid format string.   Regression?  Tested also with Framework 4.8.1 and the same behavior is present, so this does not appear to be a regression.   Known Workarounds  _No response_   Configuration  - .NET 8, .NET Framework 4.8.1 - Windows 11 - x64 - Unknown if this is architecture-specific   Other information  _No response_
114102	area-System.Text.Json	`JsonElement` properties do not support `JsonIgnoreCondition.WhenWritingNull`	Consider the following console application: ```C# Console.WriteLine(JsonSerializer.Serialize(new MyPoco()));  public class MyPoco {     [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]     public JsonElement Foo { get; set; } = JsonDocument.Parse("null").RootElement; } ``` Even though `JsonElement` is capable of representing null instances, the serializer will reject this configuration with the message  ``` System.InvalidOperationException: 'The ignore condition 'JsonIgnoreCondition.WhenWritingNull' is not valid on value-type member 'Foo' on type 'MyPoco'. Consider using 'JsonIgnoreCondition.WhenWritingDefault'.' ```  Even though `WhenWritingDefault` works, `default(JsonElement)` is an invalid value that is unfortunately different than the `JsonElement` `null` representation. This means that there currently is no mechanism for naturally serializing optional `JsonElement` properties and you're forced to use `JsonElement?` instead.
